/* tslint:disable */
/* eslint-disable */
/**
 * ShanyLedger App
 * これはShanyLedgerのAPIサーバーの仕様です。
 *
 * The version of the OpenAPI document: 0.0.42
 * Contact: support@shany-ledger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * メールアドレスとパスワードを使用したサインインのリクエストボディです。
 * @export
 * @interface AuthSignInRequest
 */
export interface AuthSignInRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthSignInRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignInRequest
     */
    'password': string;
}
/**
 * サインインが成功した場合のレスポンスボディです。
 * @export
 * @interface AuthSignInSuccessResponse
 */
export interface AuthSignInSuccessResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSignInSuccessResponse
     */
    'access_token': string;
    /**
     * 
     * @type {User}
     * @memberof AuthSignInSuccessResponse
     */
    'user': User;
}
/**
 * メールアドレスとパスワードを使用したサインアップのリクエストボディです。
 * @export
 * @interface AuthSignupRequest
 */
export interface AuthSignupRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupRequest
     */
    'password': string;
}
/**
 * サインアップが成功した場合のレスポンスボディです。
 * @export
 * @interface AuthSignupSuccessResponse
 */
export interface AuthSignupSuccessResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupSuccessResponse
     */
    'access_token': string;
    /**
     * 
     * @type {User}
     * @memberof AuthSignupSuccessResponse
     */
    'user': User;
}
/**
 * ゲートウェイまたはプロキシとして機能しているサーバーが上流のサーバーから無効なレスポンスを受け取った場合のエラー詳細です。
 * @export
 * @interface BadGatewayError
 */
export interface BadGatewayError {
    /**
     * 
     * @type {string}
     * @memberof BadGatewayError
     */
    'code': BadGatewayErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof BadGatewayError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof BadGatewayError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof BadGatewayError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof BadGatewayError
     */
    'status'?: BadGatewayErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof BadGatewayError
     */
    'instance'?: string;
}

export const BadGatewayErrorCodeEnum = {
    BadGatewayError: 'BadGatewayError'
} as const;

export type BadGatewayErrorCodeEnum = typeof BadGatewayErrorCodeEnum[keyof typeof BadGatewayErrorCodeEnum];
export const BadGatewayErrorStatusEnum = {
    NUMBER_502: 502
} as const;

export type BadGatewayErrorStatusEnum = typeof BadGatewayErrorStatusEnum[keyof typeof BadGatewayErrorStatusEnum];

/**
 * 
 * @export
 * @interface BadGatewayErrorAllOf
 */
export interface BadGatewayErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof BadGatewayErrorAllOf
     */
    'status'?: BadGatewayErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof BadGatewayErrorAllOf
     */
    'code'?: BadGatewayErrorAllOfCodeEnum;
}

export const BadGatewayErrorAllOfStatusEnum = {
    NUMBER_502: 502
} as const;

export type BadGatewayErrorAllOfStatusEnum = typeof BadGatewayErrorAllOfStatusEnum[keyof typeof BadGatewayErrorAllOfStatusEnum];
export const BadGatewayErrorAllOfCodeEnum = {
    BadGatewayError: 'BadGatewayError'
} as const;

export type BadGatewayErrorAllOfCodeEnum = typeof BadGatewayErrorAllOfCodeEnum[keyof typeof BadGatewayErrorAllOfCodeEnum];

/**
 * @type BadRequestError
 * リクエスト内容に誤りがあった場合のエラー詳細です。
 * @export
 */
export type BadRequestError = DefaultBadRequestError | ValidationError;

/**
 * 
 * @export
 * @enum {string}
 */

export const ComparisonMethod = {
    Equal: 'Equal',
    Greater: 'Greater',
    GreaterOrEqual: 'GreaterOrEqual',
    Less: 'Less',
    LessOrEqual: 'LessOrEqual'
} as const;

export type ComparisonMethod = typeof ComparisonMethod[keyof typeof ComparisonMethod];


/**
 * 競合が発生した場合のエラー詳細です。
 * @export
 * @interface ConflictError
 */
export interface ConflictError {
    /**
     * 
     * @type {string}
     * @memberof ConflictError
     */
    'code': ConflictErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof ConflictError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof ConflictError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof ConflictError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConflictError
     */
    'status'?: ConflictErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof ConflictError
     */
    'instance'?: string;
}

export const ConflictErrorCodeEnum = {
    ConflictError: 'ConflictError'
} as const;

export type ConflictErrorCodeEnum = typeof ConflictErrorCodeEnum[keyof typeof ConflictErrorCodeEnum];
export const ConflictErrorStatusEnum = {
    NUMBER_409: 409
} as const;

export type ConflictErrorStatusEnum = typeof ConflictErrorStatusEnum[keyof typeof ConflictErrorStatusEnum];

/**
 * 
 * @export
 * @interface ConflictErrorAllOf
 */
export interface ConflictErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof ConflictErrorAllOf
     */
    'status'?: ConflictErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ConflictErrorAllOf
     */
    'code'?: ConflictErrorAllOfCodeEnum;
}

export const ConflictErrorAllOfStatusEnum = {
    NUMBER_409: 409
} as const;

export type ConflictErrorAllOfStatusEnum = typeof ConflictErrorAllOfStatusEnum[keyof typeof ConflictErrorAllOfStatusEnum];
export const ConflictErrorAllOfCodeEnum = {
    ConflictError: 'ConflictError'
} as const;

export type ConflictErrorAllOfCodeEnum = typeof ConflictErrorAllOfCodeEnum[keyof typeof ConflictErrorAllOfCodeEnum];

/**
 * カーソルベースのページネーションです。
 * @export
 * @interface CursorPagination
 */
export interface CursorPagination {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof CursorPagination
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof CursorPagination
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<any>}
     * @memberof CursorPagination
     */
    'data': Array<any>;
}
/**
 * 
 * @export
 * @interface CursorPaginationLinks
 */
export interface CursorPaginationLinks {
    /**
     * 
     * @type {string}
     * @memberof CursorPaginationLinks
     */
    'first': string;
    /**
     * 
     * @type {string}
     * @memberof CursorPaginationLinks
     */
    'prev': string;
    /**
     * 
     * @type {string}
     * @memberof CursorPaginationLinks
     */
    'next': string;
}
/**
 * 
 * @export
 * @interface CursorPaginationMeta
 */
export interface CursorPaginationMeta {
    /**
     * 
     * @type {boolean}
     * @memberof CursorPaginationMeta
     */
    'hasMore': boolean;
    /**
     * 
     * @type {number}
     * @memberof CursorPaginationMeta
     */
    'perPage': number;
    /**
     * 
     * @type {any}
     * @memberof CursorPaginationMeta
     */
    'from'?: any;
    /**
     * 
     * @type {any}
     * @memberof CursorPaginationMeta
     */
    'to'?: any;
}
/**
 * リクエスト内容に誤りがあった場合のエラー詳細です。
 * @export
 * @interface DefaultBadRequestError
 */
export interface DefaultBadRequestError {
    /**
     * エラー内容が判別可能な文字列のコードです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'code': string;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof DefaultBadRequestError
     */
    'status'?: DefaultBadRequestErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'instance'?: string;
}

export const DefaultBadRequestErrorStatusEnum = {
    NUMBER_400: 400
} as const;

export type DefaultBadRequestErrorStatusEnum = typeof DefaultBadRequestErrorStatusEnum[keyof typeof DefaultBadRequestErrorStatusEnum];

/**
 * 
 * @export
 * @interface DefaultBadRequestErrorAllOf
 */
export interface DefaultBadRequestErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof DefaultBadRequestErrorAllOf
     */
    'status'?: DefaultBadRequestErrorAllOfStatusEnum;
}

export const DefaultBadRequestErrorAllOfStatusEnum = {
    NUMBER_400: 400
} as const;

export type DefaultBadRequestErrorAllOfStatusEnum = typeof DefaultBadRequestErrorAllOfStatusEnum[keyof typeof DefaultBadRequestErrorAllOfStatusEnum];

/**
 * サーバーがリクエストを理解したものの、認証が拒否された場合のエラー詳細です。
 * @export
 * @interface ForbiddenError
 */
export interface ForbiddenError {
    /**
     * 
     * @type {string}
     * @memberof ForbiddenError
     */
    'code': ForbiddenErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof ForbiddenError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof ForbiddenError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof ForbiddenError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ForbiddenError
     */
    'status'?: ForbiddenErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof ForbiddenError
     */
    'instance'?: string;
}

export const ForbiddenErrorCodeEnum = {
    ForbiddenError: 'ForbiddenError'
} as const;

export type ForbiddenErrorCodeEnum = typeof ForbiddenErrorCodeEnum[keyof typeof ForbiddenErrorCodeEnum];
export const ForbiddenErrorStatusEnum = {
    NUMBER_403: 403
} as const;

export type ForbiddenErrorStatusEnum = typeof ForbiddenErrorStatusEnum[keyof typeof ForbiddenErrorStatusEnum];

/**
 * 
 * @export
 * @interface ForbiddenErrorAllOf
 */
export interface ForbiddenErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof ForbiddenErrorAllOf
     */
    'status'?: ForbiddenErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ForbiddenErrorAllOf
     */
    'code'?: ForbiddenErrorAllOfCodeEnum;
}

export const ForbiddenErrorAllOfStatusEnum = {
    NUMBER_403: 403
} as const;

export type ForbiddenErrorAllOfStatusEnum = typeof ForbiddenErrorAllOfStatusEnum[keyof typeof ForbiddenErrorAllOfStatusEnum];
export const ForbiddenErrorAllOfCodeEnum = {
    ForbiddenError: 'ForbiddenError'
} as const;

export type ForbiddenErrorAllOfCodeEnum = typeof ForbiddenErrorAllOfCodeEnum[keyof typeof ForbiddenErrorAllOfCodeEnum];

/**
 * 永久的に利用できなくなっている対象リソースにアクセスしている場合のエラー詳細です。
 * @export
 * @interface GoneError
 */
export interface GoneError {
    /**
     * 
     * @type {string}
     * @memberof GoneError
     */
    'code': GoneErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof GoneError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof GoneError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof GoneError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof GoneError
     */
    'status'?: GoneErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof GoneError
     */
    'instance'?: string;
}

export const GoneErrorCodeEnum = {
    GoneError: 'GoneError'
} as const;

export type GoneErrorCodeEnum = typeof GoneErrorCodeEnum[keyof typeof GoneErrorCodeEnum];
export const GoneErrorStatusEnum = {
    NUMBER_410: 410
} as const;

export type GoneErrorStatusEnum = typeof GoneErrorStatusEnum[keyof typeof GoneErrorStatusEnum];

/**
 * 
 * @export
 * @interface GoneErrorAllOf
 */
export interface GoneErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof GoneErrorAllOf
     */
    'status'?: GoneErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof GoneErrorAllOf
     */
    'code'?: GoneErrorAllOfCodeEnum;
}

export const GoneErrorAllOfStatusEnum = {
    NUMBER_410: 410
} as const;

export type GoneErrorAllOfStatusEnum = typeof GoneErrorAllOfStatusEnum[keyof typeof GoneErrorAllOfStatusEnum];
export const GoneErrorAllOfCodeEnum = {
    GoneError: 'GoneError'
} as const;

export type GoneErrorAllOfCodeEnum = typeof GoneErrorAllOfCodeEnum[keyof typeof GoneErrorAllOfCodeEnum];

/**
 * サーバーで何らかの問題が発生した場合のエラー詳細です。
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'code': InternalServerErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof InternalServerError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof InternalServerError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof InternalServerError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof InternalServerError
     */
    'status'?: InternalServerErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof InternalServerError
     */
    'instance'?: string;
}

export const InternalServerErrorCodeEnum = {
    InternalServerError: 'InternalServerError'
} as const;

export type InternalServerErrorCodeEnum = typeof InternalServerErrorCodeEnum[keyof typeof InternalServerErrorCodeEnum];
export const InternalServerErrorStatusEnum = {
    NUMBER_500: 500
} as const;

export type InternalServerErrorStatusEnum = typeof InternalServerErrorStatusEnum[keyof typeof InternalServerErrorStatusEnum];

/**
 * 
 * @export
 * @interface InternalServerErrorAllOf
 */
export interface InternalServerErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof InternalServerErrorAllOf
     */
    'status'?: InternalServerErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorAllOf
     */
    'code'?: InternalServerErrorAllOfCodeEnum;
}

export const InternalServerErrorAllOfStatusEnum = {
    NUMBER_500: 500
} as const;

export type InternalServerErrorAllOfStatusEnum = typeof InternalServerErrorAllOfStatusEnum[keyof typeof InternalServerErrorAllOfStatusEnum];
export const InternalServerErrorAllOfCodeEnum = {
    InternalServerError: 'InternalServerError'
} as const;

export type InternalServerErrorAllOfCodeEnum = typeof InternalServerErrorAllOfCodeEnum[keyof typeof InternalServerErrorAllOfCodeEnum];

/**
 * メンテナンスのため一時的にサービスが利用できなくなった場合のエラー詳細です。
 * @export
 * @interface Maintenance
 */
export interface Maintenance {
    /**
     * 
     * @type {string}
     * @memberof Maintenance
     */
    'code': MaintenanceCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof Maintenance
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof Maintenance
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof Maintenance
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof Maintenance
     */
    'status'?: MaintenanceStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof Maintenance
     */
    'instance'?: string;
    /**
     * メンテナンス開始日時
     * @type {string}
     * @memberof Maintenance
     */
    'startAt': string;
    /**
     * メンテナンス終了予定日時
     * @type {string}
     * @memberof Maintenance
     */
    'endAt': string;
}

export const MaintenanceCodeEnum = {
    Maintenance: 'Maintenance'
} as const;

export type MaintenanceCodeEnum = typeof MaintenanceCodeEnum[keyof typeof MaintenanceCodeEnum];
export const MaintenanceStatusEnum = {
    NUMBER_503: 503
} as const;

export type MaintenanceStatusEnum = typeof MaintenanceStatusEnum[keyof typeof MaintenanceStatusEnum];

/**
 * 
 * @export
 * @interface MaintenanceAllOf
 */
export interface MaintenanceAllOf {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceAllOf
     */
    'code'?: MaintenanceAllOfCodeEnum;
    /**
     * 
     * @type {number}
     * @memberof MaintenanceAllOf
     */
    'status'?: MaintenanceAllOfStatusEnum;
    /**
     * メンテナンス開始日時
     * @type {string}
     * @memberof MaintenanceAllOf
     */
    'startAt': string;
    /**
     * メンテナンス終了予定日時
     * @type {string}
     * @memberof MaintenanceAllOf
     */
    'endAt': string;
}

export const MaintenanceAllOfCodeEnum = {
    Maintenance: 'Maintenance'
} as const;

export type MaintenanceAllOfCodeEnum = typeof MaintenanceAllOfCodeEnum[keyof typeof MaintenanceAllOfCodeEnum];
export const MaintenanceAllOfStatusEnum = {
    NUMBER_503: 503
} as const;

export type MaintenanceAllOfStatusEnum = typeof MaintenanceAllOfStatusEnum[keyof typeof MaintenanceAllOfStatusEnum];

/**
 * 
 * @export
 * @interface MultiStatusResponse
 */
export interface MultiStatusResponse {
    /**
     * 
     * @type {MultiStatusResponseTotal}
     * @memberof MultiStatusResponse
     */
    'total'?: MultiStatusResponseTotal;
    /**
     * 
     * @type {MultiStatusResponseItems}
     * @memberof MultiStatusResponse
     */
    'items'?: MultiStatusResponseItems;
}
/**
 * 
 * @export
 * @interface MultiStatusResponseItem
 */
export interface MultiStatusResponseItem {
    /**
     * 
     * @type {number}
     * @memberof MultiStatusResponseItem
     */
    'code': number;
    /**
     * 
     * @type {object}
     * @memberof MultiStatusResponseItem
     */
    'headers'?: object;
    /**
     * 
     * @type {object}
     * @memberof MultiStatusResponseItem
     */
    'body'?: object;
}
/**
 * 
 * @export
 * @interface MultiStatusResponseItems
 */
export interface MultiStatusResponseItems extends Array<MultiStatusResponseItem> {
}
/**
 * 
 * @export
 * @interface MultiStatusResponseTotal
 */
export interface MultiStatusResponseTotal {
    /**
     * 
     * @type {number}
     * @memberof MultiStatusResponseTotal
     */
    'success'?: number;
    /**
     * 
     * @type {number}
     * @memberof MultiStatusResponseTotal
     */
    'error'?: number;
}
/**
 * サーバーがリクエストされたリソースを見つけることができない場合のエラー詳細です。
 * @export
 * @interface NotFoundError
 */
export interface NotFoundError {
    /**
     * 
     * @type {string}
     * @memberof NotFoundError
     */
    'code': NotFoundErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof NotFoundError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof NotFoundError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof NotFoundError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof NotFoundError
     */
    'status'?: NotFoundErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof NotFoundError
     */
    'instance'?: string;
}

export const NotFoundErrorCodeEnum = {
    NotFoundError: 'NotFoundError'
} as const;

export type NotFoundErrorCodeEnum = typeof NotFoundErrorCodeEnum[keyof typeof NotFoundErrorCodeEnum];
export const NotFoundErrorStatusEnum = {
    NUMBER_404: 404
} as const;

export type NotFoundErrorStatusEnum = typeof NotFoundErrorStatusEnum[keyof typeof NotFoundErrorStatusEnum];

/**
 * 
 * @export
 * @interface NotFoundErrorAllOf
 */
export interface NotFoundErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof NotFoundErrorAllOf
     */
    'status'?: NotFoundErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof NotFoundErrorAllOf
     */
    'code'?: NotFoundErrorAllOfCodeEnum;
}

export const NotFoundErrorAllOfStatusEnum = {
    NUMBER_404: 404
} as const;

export type NotFoundErrorAllOfStatusEnum = typeof NotFoundErrorAllOfStatusEnum[keyof typeof NotFoundErrorAllOfStatusEnum];
export const NotFoundErrorAllOfCodeEnum = {
    NotFoundError: 'NotFoundError'
} as const;

export type NotFoundErrorAllOfCodeEnum = typeof NotFoundErrorAllOfCodeEnum[keyof typeof NotFoundErrorAllOfCodeEnum];

/**
 * オフセットベースのページネーションです。
 * @export
 * @interface OffsetPagination
 */
export interface OffsetPagination {
    /**
     * 
     * @type {number}
     * @memberof OffsetPagination
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof OffsetPagination
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof OffsetPagination
     */
    'current_page': number;
    /**
     * 
     * @type {number}
     * @memberof OffsetPagination
     */
    'last_page': number;
    /**
     * 
     * @type {string}
     * @memberof OffsetPagination
     */
    'first_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof OffsetPagination
     */
    'last_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof OffsetPagination
     */
    'next_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof OffsetPagination
     */
    'prev_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof OffsetPagination
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof OffsetPagination
     */
    'from': number;
    /**
     * 
     * @type {number}
     * @memberof OffsetPagination
     */
    'to': number;
    /**
     * 
     * @type {Array<any>}
     * @memberof OffsetPagination
     */
    'data': Array<any>;
}
/**
 * RFC7807（https://www.rfc-editor.org/rfc/rfc7807）に準拠したエラー詳細のベースです。
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * エラー内容が判別可能な文字列のコードです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'code': string;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string;
    /**
     * サーバによって生成されたHTTPステータスコードです。
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string;
}
/**
 * サーバーがこの未使用のコネクションをシャットダウンした場合のエラー詳細です。
 * @export
 * @interface RequestTimeoutError
 */
export interface RequestTimeoutError {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeoutError
     */
    'code': RequestTimeoutErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof RequestTimeoutError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof RequestTimeoutError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof RequestTimeoutError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeoutError
     */
    'status'?: RequestTimeoutErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof RequestTimeoutError
     */
    'instance'?: string;
}

export const RequestTimeoutErrorCodeEnum = {
    RequestTimeoutError: 'RequestTimeoutError'
} as const;

export type RequestTimeoutErrorCodeEnum = typeof RequestTimeoutErrorCodeEnum[keyof typeof RequestTimeoutErrorCodeEnum];
export const RequestTimeoutErrorStatusEnum = {
    NUMBER_408: 408
} as const;

export type RequestTimeoutErrorStatusEnum = typeof RequestTimeoutErrorStatusEnum[keyof typeof RequestTimeoutErrorStatusEnum];

/**
 * 
 * @export
 * @interface RequestTimeoutErrorAllOf
 */
export interface RequestTimeoutErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof RequestTimeoutErrorAllOf
     */
    'status'?: RequestTimeoutErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeoutErrorAllOf
     */
    'code'?: RequestTimeoutErrorAllOfCodeEnum;
}

export const RequestTimeoutErrorAllOfStatusEnum = {
    NUMBER_408: 408
} as const;

export type RequestTimeoutErrorAllOfStatusEnum = typeof RequestTimeoutErrorAllOfStatusEnum[keyof typeof RequestTimeoutErrorAllOfStatusEnum];
export const RequestTimeoutErrorAllOfCodeEnum = {
    RequestTimeoutError: 'RequestTimeoutError'
} as const;

export type RequestTimeoutErrorAllOfCodeEnum = typeof RequestTimeoutErrorAllOfCodeEnum[keyof typeof RequestTimeoutErrorAllOfCodeEnum];

/**
 * @type ServiceUnavailableError
 * メンテナンスもしくは過負荷等により一時的にサービスが利用できなくなった場合のエラー詳細です。
 * @export
 */
export type ServiceUnavailableError = Maintenance | any;

/**
 * リクエスト内容に誤りがあった場合のエラー詳細です。
 * @export
 * @interface TooManyRequestsError
 */
export interface TooManyRequestsError {
    /**
     * 
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'code': TooManyRequestsErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof TooManyRequestsError
     */
    'status'?: TooManyRequestsErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'instance'?: string;
}

export const TooManyRequestsErrorCodeEnum = {
    TooManyRequestsError: 'TooManyRequestsError'
} as const;

export type TooManyRequestsErrorCodeEnum = typeof TooManyRequestsErrorCodeEnum[keyof typeof TooManyRequestsErrorCodeEnum];
export const TooManyRequestsErrorStatusEnum = {
    NUMBER_429: 429
} as const;

export type TooManyRequestsErrorStatusEnum = typeof TooManyRequestsErrorStatusEnum[keyof typeof TooManyRequestsErrorStatusEnum];

/**
 * 
 * @export
 * @interface TooManyRequestsErrorAllOf
 */
export interface TooManyRequestsErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof TooManyRequestsErrorAllOf
     */
    'status'?: TooManyRequestsErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof TooManyRequestsErrorAllOf
     */
    'code'?: TooManyRequestsErrorAllOfCodeEnum;
}

export const TooManyRequestsErrorAllOfStatusEnum = {
    NUMBER_429: 429
} as const;

export type TooManyRequestsErrorAllOfStatusEnum = typeof TooManyRequestsErrorAllOfStatusEnum[keyof typeof TooManyRequestsErrorAllOfStatusEnum];
export const TooManyRequestsErrorAllOfCodeEnum = {
    TooManyRequestsError: 'TooManyRequestsError'
} as const;

export type TooManyRequestsErrorAllOfCodeEnum = typeof TooManyRequestsErrorAllOfCodeEnum[keyof typeof TooManyRequestsErrorAllOfCodeEnum];

/**
 * 有効な認証資格が不足していることによりリクエストが適用されない場合のエラー詳細です。
 * @export
 * @interface UnauthorizedError
 */
export interface UnauthorizedError {
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedError
     */
    'code': UnauthorizedErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof UnauthorizedError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof UnauthorizedError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof UnauthorizedError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof UnauthorizedError
     */
    'status'?: UnauthorizedErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof UnauthorizedError
     */
    'instance'?: string;
}

export const UnauthorizedErrorCodeEnum = {
    UnauthorizedError: 'UnauthorizedError'
} as const;

export type UnauthorizedErrorCodeEnum = typeof UnauthorizedErrorCodeEnum[keyof typeof UnauthorizedErrorCodeEnum];
export const UnauthorizedErrorStatusEnum = {
    NUMBER_401: 401
} as const;

export type UnauthorizedErrorStatusEnum = typeof UnauthorizedErrorStatusEnum[keyof typeof UnauthorizedErrorStatusEnum];

/**
 * 
 * @export
 * @interface UnauthorizedErrorAllOf
 */
export interface UnauthorizedErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof UnauthorizedErrorAllOf
     */
    'status'?: UnauthorizedErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof UnauthorizedErrorAllOf
     */
    'code'?: UnauthorizedErrorAllOfCodeEnum;
}

export const UnauthorizedErrorAllOfStatusEnum = {
    NUMBER_401: 401
} as const;

export type UnauthorizedErrorAllOfStatusEnum = typeof UnauthorizedErrorAllOfStatusEnum[keyof typeof UnauthorizedErrorAllOfStatusEnum];
export const UnauthorizedErrorAllOfCodeEnum = {
    UnauthorizedError: 'UnauthorizedError'
} as const;

export type UnauthorizedErrorAllOfCodeEnum = typeof UnauthorizedErrorAllOfCodeEnum[keyof typeof UnauthorizedErrorAllOfCodeEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'avatar': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email_verified_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
}
/**
 * バリデーションに失敗した場合のエラー詳細です。
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'code': ValidationErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof ValidationError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof ValidationError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof ValidationError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ValidationError
     */
    'status'?: ValidationErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof ValidationError
     */
    'instance'?: string;
    /**
     * 
     * @type {Array<ValidationErrorAllOfErrors>}
     * @memberof ValidationError
     */
    'errors'?: Array<ValidationErrorAllOfErrors>;
}

export const ValidationErrorCodeEnum = {
    ValidationError: 'ValidationError'
} as const;

export type ValidationErrorCodeEnum = typeof ValidationErrorCodeEnum[keyof typeof ValidationErrorCodeEnum];
export const ValidationErrorStatusEnum = {
    NUMBER_400: 400
} as const;

export type ValidationErrorStatusEnum = typeof ValidationErrorStatusEnum[keyof typeof ValidationErrorStatusEnum];

/**
 * 
 * @export
 * @interface ValidationErrorAllOf
 */
export interface ValidationErrorAllOf {
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOf
     */
    'code'?: ValidationErrorAllOfCodeEnum;
    /**
     * 
     * @type {Array<ValidationErrorAllOfErrors>}
     * @memberof ValidationErrorAllOf
     */
    'errors'?: Array<ValidationErrorAllOfErrors>;
}

export const ValidationErrorAllOfCodeEnum = {
    ValidationError: 'ValidationError'
} as const;

export type ValidationErrorAllOfCodeEnum = typeof ValidationErrorAllOfCodeEnum[keyof typeof ValidationErrorAllOfCodeEnum];

/**
 * 
 * @export
 * @interface ValidationErrorAllOfErrors
 */
export interface ValidationErrorAllOfErrors {
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOfErrors
     */
    'field': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOfErrors
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOfErrors
     */
    'detail'?: string;
}
/**
 * ワークスペースの情報です。
 * @export
 * @interface Workspace
 */
export interface Workspace {
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Workspace
     */
    'description'?: string;
}
/**
 * ワークスペースの参加者情報です。
 * @export
 * @interface WorkspaceInvitation
 */
export interface WorkspaceInvitation {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitation
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceInvitationUrl}
     * @memberof WorkspaceInvitation
     */
    'url'?: WorkspaceInvitationUrl;
    /**
     * 
     * @type {WorkspaceInvitationStatus}
     * @memberof WorkspaceInvitation
     */
    'status': WorkspaceInvitationStatus;
    /**
     * 
     * @type {WorkspaceInvitationRole}
     * @memberof WorkspaceInvitation
     */
    'role'?: WorkspaceInvitationRole;
    /**
     * 
     * @type {WorkspaceInvitationOnlyEmails}
     * @memberof WorkspaceInvitation
     */
    'only_emails'?: WorkspaceInvitationOnlyEmails;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitation
     */
    'expires_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitation
     */
    'max_participants'?: number;
}
/**
 * 指定されたメールアドレスごとに一意のリンクを作成し招待メールを送信します。
 * @export
 * @interface WorkspaceInvitationOnlyEmails
 */
export interface WorkspaceInvitationOnlyEmails extends Array<string> {
}
/**
 * ゲストはワークスペース全体には参加できないので招待可能な権限から除外しています。
 * @export
 * @enum {string}
 */

export const WorkspaceInvitationRole = {
    Owner: 'Owner',
    Admin: 'Admin',
    Member: 'Member'
} as const;

export type WorkspaceInvitationRole = typeof WorkspaceInvitationRole[keyof typeof WorkspaceInvitationRole];


/**
 * 
 * @export
 * @enum {string}
 */

export const WorkspaceInvitationStatus = {
    Enable: 'Enable',
    Disable: 'Disable'
} as const;

export type WorkspaceInvitationStatus = typeof WorkspaceInvitationStatus[keyof typeof WorkspaceInvitationStatus];


/**
 * 
 * @export
 * @interface WorkspaceInvitationUrl
 */
export interface WorkspaceInvitationUrl {
}
/**
 * ワークスペースの参加者一覧情報です。
 * @export
 * @interface WorkspaceInvitations
 */
export interface WorkspaceInvitations {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitations
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitations
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitations
     */
    'current_page': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitations
     */
    'last_page': number;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitations
     */
    'first_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitations
     */
    'last_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitations
     */
    'next_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitations
     */
    'prev_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceInvitations
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitations
     */
    'from': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceInvitations
     */
    'to': number;
    /**
     * 
     * @type {Array<WorkspaceInvitation>}
     * @memberof WorkspaceInvitations
     */
    'data': Array<WorkspaceInvitation>;
}
/**
 * 
 * @export
 * @interface WorkspaceInvitationsAllOf
 */
export interface WorkspaceInvitationsAllOf {
    /**
     * 
     * @type {Array<WorkspaceInvitation>}
     * @memberof WorkspaceInvitationsAllOf
     */
    'data'?: Array<WorkspaceInvitation>;
}
/**
 * 台帳の情報です。
 * @export
 * @interface WorkspaceLedger
 */
export interface WorkspaceLedger {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedger
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceLedgerAddress}
     * @memberof WorkspaceLedger
     */
    'address': WorkspaceLedgerAddress;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedger
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedger
     */
    'description'?: string | null;
    /**
     * 
     * @type {WorkspaceUnit1}
     * @memberof WorkspaceLedger
     */
    'unit': WorkspaceUnit1;
}
/**
 * 他の台帳との取引に使用する台帳番号です。
 * @export
 * @interface WorkspaceLedgerAddress
 */
export interface WorkspaceLedgerAddress {
}
/**
 * 他の台帳との取引に使用する台帳番号です。
 * @export
 * @interface WorkspaceLedgerAddress1
 */
export interface WorkspaceLedgerAddress1 {
}
/**
 * コラボレーション可能な台帳の情報です。
 * @export
 * @interface WorkspaceLedgerCollaborator
 */
export interface WorkspaceLedgerCollaborator {
    /**
     * 
     * @type {WorkspaceLedgerAddress1}
     * @memberof WorkspaceLedgerCollaborator
     */
    'id': WorkspaceLedgerAddress1;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCollaborator
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCollaborator
     */
    'description'?: string;
}
/**
 * コラボレーション可能な台帳の情報です。
 * @export
 * @interface WorkspaceLedgerCollaborator1
 */
export interface WorkspaceLedgerCollaborator1 {
    /**
     * 
     * @type {WorkspaceLedgerAddress1}
     * @memberof WorkspaceLedgerCollaborator1
     */
    'id': WorkspaceLedgerAddress1;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCollaborator1
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCollaborator1
     */
    'description'?: string;
}
/**
 * 台帳の管理単位のグループ一覧です。
 * @export
 * @interface WorkspaceLedgerCollaborators
 */
export interface WorkspaceLedgerCollaborators {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceLedgerCollaborators
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceLedgerCollaborators
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceLedgerCollaborator>}
     * @memberof WorkspaceLedgerCollaborators
     */
    'data': Array<WorkspaceLedgerCollaborator>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerCollaboratorsAllOf
 */
export interface WorkspaceLedgerCollaboratorsAllOf {
    /**
     * 
     * @type {Array<WorkspaceLedgerCollaborator>}
     * @memberof WorkspaceLedgerCollaboratorsAllOf
     */
    'data'?: Array<WorkspaceLedgerCollaborator>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerCreateRequestBody
 */
export interface WorkspaceLedgerCreateRequestBody {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCreateRequestBody
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceLedgerAddress}
     * @memberof WorkspaceLedgerCreateRequestBody
     */
    'address': WorkspaceLedgerAddress;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCreateRequestBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerCreateRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {WorkspaceUnit1}
     * @memberof WorkspaceLedgerCreateRequestBody
     */
    'unit': WorkspaceUnit1;
    /**
     * 
     * @type {WorkspaceLedgerSettingPublication}
     * @memberof WorkspaceLedgerCreateRequestBody
     */
    'publication'?: WorkspaceLedgerSettingPublication;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerCreateRequestBodyAllOf
 */
export interface WorkspaceLedgerCreateRequestBodyAllOf {
    /**
     * 
     * @type {WorkspaceLedgerSettingPublication}
     * @memberof WorkspaceLedgerCreateRequestBodyAllOf
     */
    'publication'?: WorkspaceLedgerSettingPublication;
}
/**
 * 台帳の招待情報です。 ワークスペースメンバーは招待なく自動的に追加されるので、ゲストのみ対象となる。 
 * @export
 * @interface WorkspaceLedgerInvitation
 */
export interface WorkspaceLedgerInvitation {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitation
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceLedgerInvitationUrl}
     * @memberof WorkspaceLedgerInvitation
     */
    'url'?: WorkspaceLedgerInvitationUrl;
    /**
     * 
     * @type {WorkspaceLedgerInvitationStatus}
     * @memberof WorkspaceLedgerInvitation
     */
    'status': WorkspaceLedgerInvitationStatus;
    /**
     * 
     * @type {WorkspaceLedgerMemberRole}
     * @memberof WorkspaceLedgerInvitation
     */
    'role'?: WorkspaceLedgerMemberRole;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitation
     */
    'expires_at'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkspaceLedgerInvitationStatus = {
    Enable: 'Enable',
    Disable: 'Disable'
} as const;

export type WorkspaceLedgerInvitationStatus = typeof WorkspaceLedgerInvitationStatus[keyof typeof WorkspaceLedgerInvitationStatus];


/**
 * 
 * @export
 * @interface WorkspaceLedgerInvitationUrl
 */
export interface WorkspaceLedgerInvitationUrl {
}
/**
 * 台帳の参加者招待一覧情報です。
 * @export
 * @interface WorkspaceLedgerInvitations
 */
export interface WorkspaceLedgerInvitations {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerInvitations
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerInvitations
     */
    'per_page': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerInvitations
     */
    'current_page': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerInvitations
     */
    'last_page': number;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitations
     */
    'first_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitations
     */
    'last_page_url': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitations
     */
    'next_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitations
     */
    'prev_page_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerInvitations
     */
    'path': string;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerInvitations
     */
    'from': number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerInvitations
     */
    'to': number;
    /**
     * 
     * @type {Array<WorkspaceLedgerInvitation>}
     * @memberof WorkspaceLedgerInvitations
     */
    'data': Array<WorkspaceLedgerInvitation>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerInvitationsAllOf
 */
export interface WorkspaceLedgerInvitationsAllOf {
    /**
     * 
     * @type {Array<WorkspaceLedgerInvitation>}
     * @memberof WorkspaceLedgerInvitationsAllOf
     */
    'data'?: Array<WorkspaceLedgerInvitation>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerMember
 */
export interface WorkspaceLedgerMember {
    /**
     * UuidフォーマットのIDです。
     * @type {string}
     * @memberof WorkspaceLedgerMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerMember
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerMember
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {WorkspaceLedgerMemberRole}
     * @memberof WorkspaceLedgerMember
     */
    'role'?: WorkspaceLedgerMemberRole;
}
/**
 * 台帳へ参加者を追加する際のリクエストボディです。 メールアドレスかユーザーIDで複数指定が可能で、ID指定で招待可能なユーザーはワークスペース参加者のみとなります。 メールアドレスで指定したユーザーがゲストの場合は招待が送信され、承認されることで参加となります。 
 * @export
 * @interface WorkspaceLedgerMemberAddRequestBody
 */
export interface WorkspaceLedgerMemberAddRequestBody extends Array<WorkspaceLedgerMemberAddRequestBodyItem> {
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerMemberAddRequestBodyItem
 */
export interface WorkspaceLedgerMemberAddRequestBodyItem {
}
/**
 * 台帳の参加者の追加が成功した場合のレスポンスです。
 * @export
 * @interface WorkspaceLedgerMemberAddSuccessResponse
 */
export interface WorkspaceLedgerMemberAddSuccessResponse {
    /**
     * 
     * @type {MultiStatusResponseTotal}
     * @memberof WorkspaceLedgerMemberAddSuccessResponse
     */
    'total'?: MultiStatusResponseTotal;
    /**
     * 
     * @type {MultiStatusResponseItem & object}
     * @memberof WorkspaceLedgerMemberAddSuccessResponse
     */
    'items'?: MultiStatusResponseItem & object;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerMemberAddSuccessResponseAllOf
 */
export interface WorkspaceLedgerMemberAddSuccessResponseAllOf {
    /**
     * 
     * @type {MultiStatusResponseItem & object}
     * @memberof WorkspaceLedgerMemberAddSuccessResponseAllOf
     */
    'items'?: MultiStatusResponseItem & object;
}
/**
 * | Role             | Description                                                                                   |  | ---------------- | --------------------------------------------------------------------------------------------- |  | Owner            | すべての操作が可能です。                                                                           |  | Admin            | すべての操作が可能です。                                                                           |  | Editor           | 台帳の設定とメンバーの操作以外のすべての操作が可能です。                                                 |  | Commentator      | コメントのみ可能です。                                                                             |  | Viewer           | 閲覧のみ可能です。                                                                                | 
 * @export
 * @enum {string}
 */

export const WorkspaceLedgerMemberRole = {
    Owner: 'Owner',
    Admin: 'Admin',
    Editor: 'Editor',
    Commentator: 'Commentator',
    Viewer: 'Viewer'
} as const;

export type WorkspaceLedgerMemberRole = typeof WorkspaceLedgerMemberRole[keyof typeof WorkspaceLedgerMemberRole];


/**
 * 台帳の参加者に関するセキュリティ設定です。
 * @export
 * @interface WorkspaceLedgerMemberSecuritySettings
 */
export interface WorkspaceLedgerMemberSecuritySettings {
    /**
     * 
     * @type {WorkspaceLedgerMemberRole}
     * @memberof WorkspaceLedgerMemberSecuritySettings
     */
    'role': WorkspaceLedgerMemberRole;
}
/**
 * 台帳の参加者一覧です。
 * @export
 * @interface WorkspaceLedgerMembers
 */
export interface WorkspaceLedgerMembers {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceLedgerMembers
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceLedgerMembers
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {WorkspaceLedgerMember}
     * @memberof WorkspaceLedgerMembers
     */
    'data': WorkspaceLedgerMember;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerMembersAllOf
 */
export interface WorkspaceLedgerMembersAllOf {
    /**
     * 
     * @type {WorkspaceLedgerMember}
     * @memberof WorkspaceLedgerMembersAllOf
     */
    'data'?: WorkspaceLedgerMember;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerSecuritySettingPublicationUrl
 */
export interface WorkspaceLedgerSecuritySettingPublicationUrl {
}
/**
 * 閾値にかかった場合、アラート通知をオンにしている参加者に通知します。
 * @export
 * @interface WorkspaceLedgerSettingAlert
 */
export interface WorkspaceLedgerSettingAlert {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerSettingAlert
     */
    'threshold'?: number;
    /**
     * 
     * @type {ComparisonMethod}
     * @memberof WorkspaceLedgerSettingAlert
     */
    'comparison_method'?: ComparisonMethod;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerSettingBalance
 */
export interface WorkspaceLedgerSettingBalance {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerSettingBalance
     */
    'min'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerSettingBalance
     */
    'max'?: number;
}
/**
 * 有効にした場合は、登録された台帳とコラボレーションが可能になります。コラボレーションを行うにはコラボレーション相手のコラボレーション機能が有効になっている必要があります。
 * @export
 * @interface WorkspaceLedgerSettingCollaboration
 */
export interface WorkspaceLedgerSettingCollaboration {
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceLedgerSettingCollaboration
     */
    'enable'?: boolean;
    /**
     * 
     * @type {WorkspaceLedgerSettingCollaborationReceipt}
     * @memberof WorkspaceLedgerSettingCollaboration
     */
    'receipt'?: WorkspaceLedgerSettingCollaborationReceipt;
    /**
     * 
     * @type {WorkspaceLedgerSettingCollaborationReceipt}
     * @memberof WorkspaceLedgerSettingCollaboration
     */
    'transfer'?: WorkspaceLedgerSettingCollaborationReceipt;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerSettingCollaborationReceipt
 */
export interface WorkspaceLedgerSettingCollaborationReceipt {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerSettingCollaborationReceipt
     */
    'min'?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerSettingCollaborationReceipt
     */
    'max'?: number;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerSettingGoal
 */
export interface WorkspaceLedgerSettingGoal {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerSettingGoal
     */
    'threshold'?: number;
    /**
     * 
     * @type {ComparisonMethod}
     * @memberof WorkspaceLedgerSettingGoal
     */
    'comparison_method'?: ComparisonMethod;
}
/**
 * ワークスペースの公開設定です。
 * @export
 * @interface WorkspaceLedgerSettingPublication
 */
export interface WorkspaceLedgerSettingPublication {
    /**
     * 
     * @type {WorkspaceLedgerSettingPublicationScope}
     * @memberof WorkspaceLedgerSettingPublication
     */
    'scope': WorkspaceLedgerSettingPublicationScope;
    /**
     * 
     * @type {WorkspaceLedgerSecuritySettingPublicationUrl}
     * @memberof WorkspaceLedgerSettingPublication
     */
    'url'?: WorkspaceLedgerSecuritySettingPublicationUrl;
}
/**
 * | Public Scope           | Description                                                                              |  | ---------------------- | ---------------------------------------------------------------------------------------- |  | Public                 | URLを知っている人であれば誰でも閲覧が可能です。                                                  |  | WorkspaceMember        | ワークスペースの参加者であれば誰でも閲覧と参加が可能です。                                          |  | LedgerMember           | 参加者のみ閲覧が可能です。参加するには招待が必要となります。                                        | 
 * @export
 * @enum {string}
 */

export const WorkspaceLedgerSettingPublicationScope = {
    Public: 'Public',
    WorkspaceMember: 'WorkspaceMember',
    LedgerMember: 'LedgerMember'
} as const;

export type WorkspaceLedgerSettingPublicationScope = typeof WorkspaceLedgerSettingPublicationScope[keyof typeof WorkspaceLedgerSettingPublicationScope];


/**
 * 台帳の取引に関する設定です。
 * @export
 * @interface WorkspaceLedgerSettingTransaction
 */
export interface WorkspaceLedgerSettingTransaction {
    /**
     * 
     * @type {any}
     * @memberof WorkspaceLedgerSettingTransaction
     */
    'deposit'?: any;
    /**
     * 
     * @type {any}
     * @memberof WorkspaceLedgerSettingTransaction
     */
    'withdrawal'?: any;
}
/**
 * 台帳の取引情報です。
 * @export
 * @interface WorkspaceLedgerTransaction
 */
export interface WorkspaceLedgerTransaction {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerTransaction
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceLedgerCollaborator1}
     * @memberof WorkspaceLedgerTransaction
     */
    'collaborator'?: WorkspaceLedgerCollaborator1;
    /**
     * 
     * @type {WorkspaceLedgerAddress1}
     * @memberof WorkspaceLedgerTransaction
     */
    'collaborator_id'?: WorkspaceLedgerAddress1;
    /**
     * 
     * @type {any}
     * @memberof WorkspaceLedgerTransaction
     */
    'type'?: any;
    /**
     * 
     * @type {WorkspaceLedgerTransactionDescription}
     * @memberof WorkspaceLedgerTransaction
     */
    'description'?: WorkspaceLedgerTransactionDescription;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerTransaction
     */
    'data': number;
}
/**
 * 読み取り時のトランザクションに対するコメントです。
 * @export
 * @interface WorkspaceLedgerTransactionComment
 */
export interface WorkspaceLedgerTransactionComment {
    /**
     * UuidフォーマットのIDです。
     * @type {string}
     * @memberof WorkspaceLedgerTransactionComment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerTransactionComment
     */
    'text'?: string;
    /**
     * 
     * @type {Array<WorkspaceLedgerTransactionCommentFilesInner>}
     * @memberof WorkspaceLedgerTransactionComment
     */
    'files'?: Array<WorkspaceLedgerTransactionCommentFilesInner>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactionCommentCreateRequestBody
 */
export interface WorkspaceLedgerTransactionCommentCreateRequestBody {
    /**
     * UuidフォーマットのIDです。
     * @type {string}
     * @memberof WorkspaceLedgerTransactionCommentCreateRequestBody
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerTransactionCommentCreateRequestBody
     */
    'text'?: string;
    /**
     * 
     * @type {Array<WorkspaceLedgerTransactionCommentFilesInner>}
     * @memberof WorkspaceLedgerTransactionCommentCreateRequestBody
     */
    'files'?: Array<WorkspaceLedgerTransactionCommentFilesInner>;
}
/**
 * @type WorkspaceLedgerTransactionCommentFilesInner
 * @export
 */
export type WorkspaceLedgerTransactionCommentFilesInner = File | string;

/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactionCommentUpdateRequestBody
 */
export interface WorkspaceLedgerTransactionCommentUpdateRequestBody {
    /**
     * UuidフォーマットのIDです。
     * @type {string}
     * @memberof WorkspaceLedgerTransactionCommentUpdateRequestBody
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerTransactionCommentUpdateRequestBody
     */
    'text'?: string;
    /**
     * 
     * @type {Array<WorkspaceLedgerTransactionCommentFilesInner>}
     * @memberof WorkspaceLedgerTransactionCommentUpdateRequestBody
     */
    'files'?: Array<WorkspaceLedgerTransactionCommentFilesInner>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactionComments
 */
export interface WorkspaceLedgerTransactionComments {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceLedgerTransactionComments
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceLedgerTransactionComments
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceLedgerTransactionComment>}
     * @memberof WorkspaceLedgerTransactionComments
     */
    'data': Array<WorkspaceLedgerTransactionComment>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactionCommentsAllOf
 */
export interface WorkspaceLedgerTransactionCommentsAllOf {
    /**
     * 
     * @type {Array<WorkspaceLedgerTransactionComment>}
     * @memberof WorkspaceLedgerTransactionCommentsAllOf
     */
    'data'?: Array<WorkspaceLedgerTransactionComment>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactionCreateRequestBody
 */
export interface WorkspaceLedgerTransactionCreateRequestBody {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerTransactionCreateRequestBody
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceLedgerCollaborator1}
     * @memberof WorkspaceLedgerTransactionCreateRequestBody
     */
    'collaborator'?: WorkspaceLedgerCollaborator1;
    /**
     * 
     * @type {WorkspaceLedgerAddress1}
     * @memberof WorkspaceLedgerTransactionCreateRequestBody
     */
    'collaborator_id'?: WorkspaceLedgerAddress1;
    /**
     * 
     * @type {any}
     * @memberof WorkspaceLedgerTransactionCreateRequestBody
     */
    'type'?: any;
    /**
     * 
     * @type {WorkspaceLedgerTransactionDescription}
     * @memberof WorkspaceLedgerTransactionCreateRequestBody
     */
    'description'?: WorkspaceLedgerTransactionDescription;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceLedgerTransactionCreateRequestBody
     */
    'data': number;
}
/**
 * textかfilesどちらかは必ず指定する必要があります。
 * @export
 * @interface WorkspaceLedgerTransactionDescription
 */
export interface WorkspaceLedgerTransactionDescription {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerTransactionDescription
     */
    'text'?: string;
    /**
     * 
     * @type {Array<WorkspaceLedgerTransactionDescriptionFilesInner>}
     * @memberof WorkspaceLedgerTransactionDescription
     */
    'files'?: Array<WorkspaceLedgerTransactionDescriptionFilesInner>;
}
/**
 * @type WorkspaceLedgerTransactionDescriptionFilesInner
 * @export
 */
export type WorkspaceLedgerTransactionDescriptionFilesInner = File | string;

/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactions
 */
export interface WorkspaceLedgerTransactions {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceLedgerTransactions
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceLedgerTransactions
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceLedgerTransaction>}
     * @memberof WorkspaceLedgerTransactions
     */
    'data': Array<WorkspaceLedgerTransaction>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerTransactionsAllOf
 */
export interface WorkspaceLedgerTransactionsAllOf {
    /**
     * 
     * @type {Array<WorkspaceLedgerTransaction>}
     * @memberof WorkspaceLedgerTransactionsAllOf
     */
    'data'?: Array<WorkspaceLedgerTransaction>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgerUpdateRequestBody
 */
export interface WorkspaceLedgerUpdateRequestBody {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerUpdateRequestBody
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceLedgerAddress}
     * @memberof WorkspaceLedgerUpdateRequestBody
     */
    'address': WorkspaceLedgerAddress;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerUpdateRequestBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceLedgerUpdateRequestBody
     */
    'description'?: string | null;
    /**
     * 
     * @type {WorkspaceUnit1}
     * @memberof WorkspaceLedgerUpdateRequestBody
     */
    'unit': WorkspaceUnit1;
}
/**
 * 台帳の管理単位のグループ一覧です。
 * @export
 * @interface WorkspaceLedgers
 */
export interface WorkspaceLedgers {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceLedgers
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceLedgers
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceLedger>}
     * @memberof WorkspaceLedgers
     */
    'data': Array<WorkspaceLedger>;
}
/**
 * 
 * @export
 * @interface WorkspaceLedgersAllOf
 */
export interface WorkspaceLedgersAllOf {
    /**
     * 
     * @type {Array<WorkspaceLedger>}
     * @memberof WorkspaceLedgersAllOf
     */
    'data'?: Array<WorkspaceLedger>;
}
/**
 * ワークスペースの参加者情報です。
 * @export
 * @interface WorkspaceMember
 */
export interface WorkspaceMember {
    /**
     * UuidフォーマットのIDです。
     * @type {string}
     * @memberof WorkspaceMember
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMember
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMember
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof WorkspaceMember
     */
    'role'?: any;
}
/**
 * ワークスペースの参加者情報です。
 * @export
 * @interface WorkspaceMember1
 */
export interface WorkspaceMember1 {
    /**
     * UuidフォーマットのIDです。
     * @type {string}
     * @memberof WorkspaceMember1
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMember1
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMember1
     */
    'avatar'?: string | null;
    /**
     * 
     * @type {any}
     * @memberof WorkspaceMember1
     */
    'role'?: any;
}
/**
 * ワークスペースの参加者グループ情報です。
 * @export
 * @interface WorkspaceMemberGroup
 */
export interface WorkspaceMemberGroup {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroup
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroup
     */
    'description'?: string;
    /**
     * 
     * @type {WorkspaceMemberGroupMembers}
     * @memberof WorkspaceMemberGroup
     */
    'members': WorkspaceMemberGroupMembers;
}
/**
 * ワークスペースの参加者グループ一覧情報です。
 * @export
 * @interface WorkspaceMemberGroupCreateRequestBody
 */
export interface WorkspaceMemberGroupCreateRequestBody {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroupCreateRequestBody
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroupCreateRequestBody
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroupCreateRequestBody
     */
    'description'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkspaceMemberGroupCreateRequestBody
     */
    'members': Array<string>;
}
/**
 * 
 * @export
 * @interface WorkspaceMemberGroupCreateRequestBodyAllOf
 */
export interface WorkspaceMemberGroupCreateRequestBodyAllOf {
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkspaceMemberGroupCreateRequestBodyAllOf
     */
    'members'?: Array<string>;
}
/**
 * 
 * @export
 * @interface WorkspaceMemberGroupMembers
 */
export interface WorkspaceMemberGroupMembers {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceMemberGroupMembers
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceMemberGroupMembers
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {any}
     * @memberof WorkspaceMemberGroupMembers
     */
    'data': any;
}
/**
 * ワークスペースの参加者グループに参加者を追加するリクエストボディです。
 * @export
 * @interface WorkspaceMemberGroupMembersAddRequestBody
 */
export interface WorkspaceMemberGroupMembersAddRequestBody extends Array<string> {
}
/**
 * 
 * @export
 * @interface WorkspaceMemberGroupMembersAllOf
 */
export interface WorkspaceMemberGroupMembersAllOf {
    /**
     * 
     * @type {Array<WorkspaceMember1>}
     * @memberof WorkspaceMemberGroupMembersAllOf
     */
    'data'?: Array<WorkspaceMember1>;
}
/**
 * ワークスペースの参加者グループから参加者を削除するリクエストボディです。
 * @export
 * @interface WorkspaceMemberGroupMembersDeleteRequestBody
 */
export interface WorkspaceMemberGroupMembersDeleteRequestBody extends Array<string> {
}
/**
 * ワークスペースの参加者グループ一覧情報です。
 * @export
 * @interface WorkspaceMemberGroupUpdateRequestBody
 */
export interface WorkspaceMemberGroupUpdateRequestBody {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroupUpdateRequestBody
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceMemberGroupUpdateRequestBody
     */
    'description'?: string;
}
/**
 * ワークスペースの参加者グループ一覧情報です。
 * @export
 * @interface WorkspaceMemberGroups
 */
export interface WorkspaceMemberGroups {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceMemberGroups
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceMemberGroups
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceMemberGroup>}
     * @memberof WorkspaceMemberGroups
     */
    'data': Array<WorkspaceMemberGroup>;
}
/**
 * 
 * @export
 * @interface WorkspaceMemberGroupsAllOf
 */
export interface WorkspaceMemberGroupsAllOf {
    /**
     * 
     * @type {Array<WorkspaceMemberGroup>}
     * @memberof WorkspaceMemberGroupsAllOf
     */
    'data'?: Array<WorkspaceMemberGroup>;
}
/**
 * | Role             | Description                                                                                   |  | ---------------- | --------------------------------------------------------------------------------------------- |  | Owner            | すべての操作が可能です。                                                                           |  | Admin            | ワークスペースの一部設定以外すべての操作が可能です。                                                    |  | Member           | ワークスペースの設定とメンバーの操作以外のすべての操作が可能です。                                         |  | Guest            | 招待された台帳のみパーミッションに準じた操作が可能です。ワークスペース全体に招待することはできません。            | 
 * @export
 * @enum {string}
 */

export const WorkspaceMemberRole = {
    Owner: 'Owner',
    Admin: 'Admin',
    Member: 'Member',
    Guest: 'Guest'
} as const;

export type WorkspaceMemberRole = typeof WorkspaceMemberRole[keyof typeof WorkspaceMemberRole];


/**
 * ワークスペースの参加者に関するセキュリティ設定です。
 * @export
 * @interface WorkspaceMemberSecuritySettings
 */
export interface WorkspaceMemberSecuritySettings {
    /**
     * 
     * @type {WorkspaceMemberRole}
     * @memberof WorkspaceMemberSecuritySettings
     */
    'role'?: WorkspaceMemberRole;
}
/**
 * ワークスペースの参加者一覧情報です。
 * @export
 * @interface WorkspaceMembers
 */
export interface WorkspaceMembers {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceMembers
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceMembers
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceMember>}
     * @memberof WorkspaceMembers
     */
    'data': Array<WorkspaceMember>;
}
/**
 * 
 * @export
 * @interface WorkspaceMembersAllOf
 */
export interface WorkspaceMembersAllOf {
    /**
     * 
     * @type {Array<WorkspaceMember>}
     * @memberof WorkspaceMembersAllOf
     */
    'data'?: Array<WorkspaceMember>;
}
/**
 * ワークスペースの参加者情報です。
 * @export
 * @interface WorkspaceSecuritySettings
 */
export interface WorkspaceSecuritySettings {
    /**
     * 
     * @type {WorkspaceSecuritySettingsAccessRestriction}
     * @memberof WorkspaceSecuritySettings
     */
    'access_restriction': WorkspaceSecuritySettingsAccessRestriction;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const WorkspaceSecuritySettingsAccessRestriction = {
    None: 'None',
    MemberOnly: 'MemberOnly'
} as const;

export type WorkspaceSecuritySettingsAccessRestriction = typeof WorkspaceSecuritySettingsAccessRestriction[keyof typeof WorkspaceSecuritySettingsAccessRestriction];


/**
 * 台帳の管理単位です。
 * @export
 * @interface WorkspaceUnit
 */
export interface WorkspaceUnit {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceUnitDefiner}
     * @memberof WorkspaceUnit
     */
    'definer'?: WorkspaceUnitDefiner;
    /**
     * 
     * @type {WorkspaceUnitCategory}
     * @memberof WorkspaceUnit
     */
    'category'?: WorkspaceUnitCategory;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit
     */
    'symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit
     */
    'description'?: string;
}
/**
 * 台帳の管理単位です。
 * @export
 * @interface WorkspaceUnit1
 */
export interface WorkspaceUnit1 {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit1
     */
    'id': string;
    /**
     * 
     * @type {WorkspaceUnitDefiner}
     * @memberof WorkspaceUnit1
     */
    'definer'?: WorkspaceUnitDefiner;
    /**
     * 
     * @type {WorkspaceUnitCategory}
     * @memberof WorkspaceUnit1
     */
    'category'?: WorkspaceUnitCategory;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit1
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit1
     */
    'symbol'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceUnit1
     */
    'description'?: string;
}
/**
 * - Money: お金 - Length: 長さ - Area: 面積 - Volume: 体積・容積 - WeightAndMass: 重量・質量 - Quantity: 数量 - Time: 時間 - Energy: エネルギー - Other: その他 
 * @export
 * @enum {string}
 */

export const WorkspaceUnitCategory = {
    Money: 'Money',
    Length: 'Length',
    Area: 'Area',
    Volume: 'Volume',
    WeightAndMass: 'WeightAndMass',
    Quantity: 'Quantity',
    Time: 'Time',
    Energy: 'Energy',
    Other: 'Other'
} as const;

export type WorkspaceUnitCategory = typeof WorkspaceUnitCategory[keyof typeof WorkspaceUnitCategory];


/**
 * システムで用意しているユニットとユーザー定義のユニットを分けるための定義者項目です。
 * @export
 * @enum {string}
 */

export const WorkspaceUnitDefiner = {
    System: 'System',
    User: 'User'
} as const;

export type WorkspaceUnitDefiner = typeof WorkspaceUnitDefiner[keyof typeof WorkspaceUnitDefiner];


/**
 * 台帳の管理単位一覧です。
 * @export
 * @interface WorkspaceUnits
 */
export interface WorkspaceUnits {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspaceUnits
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspaceUnits
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<WorkspaceUnit>}
     * @memberof WorkspaceUnits
     */
    'data': Array<WorkspaceUnit>;
}
/**
 * 
 * @export
 * @interface WorkspaceUnitsAllOf
 */
export interface WorkspaceUnitsAllOf {
    /**
     * 
     * @type {Array<WorkspaceUnit>}
     * @memberof WorkspaceUnitsAllOf
     */
    'data'?: Array<WorkspaceUnit>;
}
/**
 * 
 * @export
 * @interface Workspaces
 */
export interface Workspaces {
    /**
     * 
     * @type {Array<Workspace>}
     * @memberof Workspaces
     */
    'data': Array<Workspace>;
}
/**
 * 対象のユーザーが所属するワークスペースの一覧情報です。
 * @export
 * @interface WorkspacesWithPagination
 */
export interface WorkspacesWithPagination {
    /**
     * 
     * @type {CursorPaginationMeta}
     * @memberof WorkspacesWithPagination
     */
    'meta': CursorPaginationMeta;
    /**
     * 
     * @type {CursorPaginationLinks}
     * @memberof WorkspacesWithPagination
     */
    'links': CursorPaginationLinks;
    /**
     * 
     * @type {Array<Workspace>}
     * @memberof WorkspacesWithPagination
     */
    'data': Array<Workspace>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignInRequest} authSignInRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInWithEmailAndPassword: async (authSignInRequest: AuthSignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignInRequest' is not null or undefined
            assertParamExists('signInWithEmailAndPassword', 'authSignInRequest', authSignInRequest)
            const localVarPath = `/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignInRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpWithEmailAndPassword: async (authSignupRequest: AuthSignupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignupRequest' is not null or undefined
            assertParamExists('signUpWithEmailAndPassword', 'authSignupRequest', authSignupRequest)
            const localVarPath = `/sign-up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignInRequest} authSignInRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInWithEmailAndPassword(authSignInRequest: AuthSignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSignInSuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInWithEmailAndPassword(authSignInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSignupSuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpWithEmailAndPassword(authSignupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignInRequest} authSignInRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInWithEmailAndPassword(authSignInRequest: AuthSignInRequest, options?: any): AxiosPromise<AuthSignInSuccessResponse> {
            return localVarFp.signInWithEmailAndPassword(authSignInRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: any): AxiosPromise<AuthSignupSuccessResponse> {
            return localVarFp.signUpWithEmailAndPassword(authSignupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * メールアドレスとパスワードを使用してサインアップとサインインを行います。
     * @summary サインアップとサインインを行います。
     * @param {AuthSignInRequest} authSignInRequest サインアップのリクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    signInWithEmailAndPassword(authSignInRequest: AuthSignInRequest, options?: AxiosRequestConfig): AxiosPromise<AuthSignInSuccessResponse>;

    /**
     * メールアドレスとパスワードを使用してサインアップとサインインを行います。
     * @summary サインアップとサインインを行います。
     * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: AxiosRequestConfig): AxiosPromise<AuthSignupSuccessResponse>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * メールアドレスとパスワードを使用してサインアップとサインインを行います。
     * @summary サインアップとサインインを行います。
     * @param {AuthSignInRequest} authSignInRequest サインアップのリクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signInWithEmailAndPassword(authSignInRequest: AuthSignInRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signInWithEmailAndPassword(authSignInRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * メールアドレスとパスワードを使用してサインアップとサインインを行います。
     * @summary サインアップとサインインを行います。
     * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signUpWithEmailAndPassword(authSignupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * WorkspaceApi - axios parameter creator
 * @export
 */
export const WorkspaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * IDを使用してワークスペースを削除します。
         * @summary ワークスペースの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete: async (workspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('_delete', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳のコラボレーターを追加します。
         * @summary 台帳のコラボレーターの追加を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerAddress1} [body] 台帳のコラボレーターの追加リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLedgerCollaborator: async (workspaceId: string, workspaceLedgerId: string, body?: WorkspaceLedgerAddress1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('addLedgerCollaborator', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('addLedgerCollaborator', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/collaborators`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の参加者を追加します。
         * @summary 台帳の参加者の追加を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerMemberAddRequestBody} [workspaceLedgerMemberAddRequestBody] 台帳の参加者の追加リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLedgerMember: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberAddRequestBody?: WorkspaceLedgerMemberAddRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('addLedgerMember', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('addLedgerMember', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/members`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerMemberAddRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を更新します。
         * @summary ワークスペースの参加者グループの参加者の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupMembersAddRequestBody} [workspaceMemberGroupMembersAddRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberGroupMembers: async (workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersAddRequestBody?: WorkspaceMemberGroupMembersAddRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('addMemberGroupMembers', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('addMemberGroupMembers', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups/[workspaceMemberGroupId]/members`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceMemberGroupMembersAddRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークスペースを作成します。
         * @summary ワークスペースの作成を行います。
         * @param {Workspace} workspace ワークスペースの新規作成リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (workspace: Workspace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspace' is not null or undefined
            assertParamExists('create', 'workspace', workspace)
            const localVarPath = `/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークスペースの参加招待を作成します。
         * @summary ワークスペースの参加招待の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvitation: async (workspaceId: string, workspaceInvitation: WorkspaceInvitation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitation' is not null or undefined
            assertParamExists('createInvitation', 'workspaceInvitation', workspaceInvitation)
            const localVarPath = `/workspaces/[workspaceId]/invitations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceInvitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerCreateRequestBody} [workspaceLedgerCreateRequestBody] 台帳の作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedger: async (workspaceId: string, workspaceLedgerCreateRequestBody?: WorkspaceLedgerCreateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createLedger', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerCreateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の参加招待を作成します。
         * @summary 台帳の参加招待の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedgerInvitation: async (workspaceId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createLedgerInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerInvitation' is not null or undefined
            assertParamExists('createLedgerInvitation', 'workspaceLedgerInvitation', workspaceLedgerInvitation)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/invitations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerInvitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の取引の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerTransactionCreateRequestBody} [workspaceLedgerTransactionCreateRequestBody] 台帳の取引の作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedgerTransaction: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionCreateRequestBody?: WorkspaceLedgerTransactionCreateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createLedgerTransaction', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('createLedgerTransaction', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerTransactionCreateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の取引のコメント作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {WorkspaceLedgerTransactionCommentCreateRequestBody} [workspaceLedgerTransactionCommentCreateRequestBody] 台帳の取引のコメントの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedgerTransactionComment: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentCreateRequestBody?: WorkspaceLedgerTransactionCommentCreateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createLedgerTransactionComment', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('createLedgerTransactionComment', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('createLedgerTransactionComment', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]/comments`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerTransactionCommentCreateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークスペースの参加者グループを作成します。
         * @summary ワークスペースの参加者グループの作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceMemberGroupCreateRequestBody} [workspaceMemberGroupCreateRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberGroup: async (workspaceId: string, workspaceMemberGroupCreateRequestBody?: WorkspaceMemberGroupCreateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('createMemberGroup', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceMemberGroupCreateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳で使用する管理単位を作成します。
         * @summary 台帳で使用する管理単位の作成を行います。
         * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の新規作成リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUnit: async (workspaceUnit: WorkspaceUnit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceUnit' is not null or undefined
            assertParamExists('createUnit', 'workspaceUnit', workspaceUnit)
            const localVarPath = `/workspaces/[workspaceId]/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceUnit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加招待を削除します。
         * @summary ワークスペースの参加招待の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvitation: async (workspaceId: string, workspaceInvitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('deleteInvitation', 'workspaceInvitationId', workspaceInvitationId)
            const localVarPath = `/workspaces/[workspaceId]/invitations/[workspaceInvitationId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedger: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteLedger', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('deleteLedger', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳のコラボレーターを削除します。
         * @summary 台帳のコラボレーターの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerCollaborator: async (workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteLedgerCollaborator', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('deleteLedgerCollaborator', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/collaborators/[workspaceLedgerCollaboratorId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の参加招待を削除します。
         * @summary 台帳の参加招待の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerInvitation: async (workspaceId: string, workspaceInvitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteLedgerInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('deleteLedgerInvitation', 'workspaceInvitationId', workspaceInvitationId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/invitations/[workspaceInvitationId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の参加者を削除します。
         * @summary 台帳の参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerMember: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteLedgerMember', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('deleteLedgerMember', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/members/[workspaceLedgerMemberId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の取引の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerTransaction: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteLedgerTransaction', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('deleteLedgerTransaction', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('deleteLedgerTransaction', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の取引のコメント削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerTransactionComment: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteLedgerTransactionComment', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('deleteLedgerTransactionComment', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('deleteLedgerTransactionComment', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]/comments/[workspaceLedgerTransactionCommentId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者を削除します。
         * @summary ワークスペースの参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember: async (workspaceId: string, memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteMember', 'workspaceId', workspaceId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('deleteMember', 'memberId', memberId)
            const localVarPath = `/workspaces/[workspaceId]/members/[memberId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者グループを削除します。
         * @summary ワークスペースの参加者グループの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberGroup: async (workspaceId: string, workspaceMemberGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteMemberGroup', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('deleteMemberGroup', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups/[workspaceMemberGroupId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を削除します。
         * @summary ワークスペースの参加者グループの参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupMembersDeleteRequestBody} [workspaceMemberGroupMembersDeleteRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberGroupMembers: async (workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersDeleteRequestBody?: WorkspaceMemberGroupMembersDeleteRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteMemberGroupMembers', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('deleteMemberGroupMembers', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups/[workspaceMemberGroupId]/members`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceMemberGroupMembersDeleteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳で使用する管理単位を削除します。
         * @summary 台帳で使用する管理単位の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnit: async (workspaceId: string, workspaceUnitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('deleteUnit', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceUnitId' is not null or undefined
            assertParamExists('deleteUnit', 'workspaceUnitId', workspaceUnitId)
            const localVarPath = `/workspaces/[workspaceId]/units/[workspaceUnitId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceUnitId"}}`, encodeURIComponent(String(workspaceUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースを取得します。
         * @summary ワークスペースの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find: async (workspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('find', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加招待を取得します。
         * @summary ワークスペースの参加招待の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInvitation: async (workspaceId: string, workspaceInvitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('findInvitation', 'workspaceInvitationId', workspaceInvitationId)
            const localVarPath = `/workspaces/[workspaceId]/invitations/[workspaceInvitationId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedger: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedger', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedger', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳のコラボレーターを取得します。
         * @summary 台帳のコラボレーターの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerCollaborator: async (workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerCollaborator', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerCollaborator', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/collaborators/[workspaceLedgerCollaboratorId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の参加招待を取得します。
         * @summary 台帳の参加招待の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerInvitation: async (workspaceId: string, workspaceInvitationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('findLedgerInvitation', 'workspaceInvitationId', workspaceInvitationId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/invitations/[workspaceInvitationId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の参加者を取得します。
         * @summary 台帳の参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerMember: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerMember', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerMember', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/members/[workspaceLedgerMemberId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
         * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerMemberSecuritySetting: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerMemberSecuritySetting', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerMemberSecuritySetting', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/members/[workspaceLedgerMemberId]/security-settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳のアラート設定を取得します。
         * @summary 台帳のアラート設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingAlert: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerSettingAlert', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerSettingAlert', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/alert`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の残高設定を取得します。
         * @summary 台帳の残高設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingBalance: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerSettingBalance', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerSettingBalance', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/balance`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳のコラボレーション設定を取得します。
         * @summary 台帳のコラボレーション設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingCollaboration: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerSettingCollaboration', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerSettingCollaboration', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/collaboration`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の目標設定を取得します。
         * @summary 台帳の目標設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingGoal: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerSettingGoal', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerSettingGoal', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/goal`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の公開設定を取得します。
         * @summary 台帳の公開設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingPublication: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerSettingPublication', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerSettingPublication', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/publication`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の取引設定を取得します。
         * @summary 台帳の取引設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingTransaction: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerSettingTransaction', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerSettingTransaction', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/transaction`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取引の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerTransaction: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerTransaction', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerTransaction', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('findLedgerTransaction', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取引のコメント取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerTransactionComment: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findLedgerTransactionComment', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('findLedgerTransactionComment', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('findLedgerTransactionComment', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]/comments/[workspaceLedgerTransactionCommentId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者を取得します。
         * @summary ワークスペースの参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMember: async (workspaceId: string, memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findMember', 'workspaceId', workspaceId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('findMember', 'memberId', memberId)
            const localVarPath = `/workspaces/[workspaceId]/members/[memberId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者グループを取得します。
         * @summary ワークスペースの参加者グループの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberGroup: async (workspaceId: string, workspaceMemberGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findMemberGroup', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('findMemberGroup', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups/[workspaceMemberGroupId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
         * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberSecuritySetting: async (workspaceId: string, memberId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findMemberSecuritySetting', 'workspaceId', workspaceId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('findMemberSecuritySetting', 'memberId', memberId)
            const localVarPath = `/workspaces/[workspaceId]/members/[memberId]/security-settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースのセキュリティ設定を取得します。
         * @summary ワークスペースのセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSecuritySetting: async (workspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findSecuritySetting', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]/security-settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳で使用する管理単位を取得します。
         * @summary 台帳で使用する管理単位の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUnit: async (workspaceId: string, workspaceUnitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('findUnit', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceUnitId' is not null or undefined
            assertParamExists('findUnit', 'workspaceUnitId', workspaceUnitId)
            const localVarPath = `/workspaces/[workspaceId]/units/[workspaceUnitId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceUnitId"}}`, encodeURIComponent(String(workspaceUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの所属するワークスペースの一覧を取得します。
         * @summary ワークスペースの一覧の取得を行います。
         * @param {string} [cursor] カーソルページネーションのカーソル位置です。
         * @param {number} [perPage] カーソルページネーションの表示件数です。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (cursor?: string, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspaces`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークスペースの参加招待の一覧を取得します。
         * @summary ワークスペースの参加招待の一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {Array<WorkspaceInvitationRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceInvitationRolesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceInvitationRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
         * @param {Array<WorkspaceInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInvitation: async (workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceInvitationRole>, inclusionMemberRoles?: Array<WorkspaceInvitationRole>, exclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('searchInvitation', 'workspaceInvitationId', workspaceInvitationId)
            const localVarPath = `/workspaces/[workspaceId]/invitations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exclusionMemberRoles) {
                localVarQueryParameter['exclusion_member_roles[]'] = exclusionMemberRoles;
            }

            if (inclusionMemberRoles) {
                localVarQueryParameter['inclusion_member_roles[]'] = inclusionMemberRoles;
            }

            if (exclusionInvitationStatuses) {
                localVarQueryParameter['exclusion_invitation_statuses[]'] = exclusionInvitationStatuses;
            }

            if (inclusionInvitationStatuses) {
                localVarQueryParameter['inclusion_invitation_statuses[]'] = inclusionInvitationStatuses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の一覧を取得します。
         * @summary 台帳の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedger: async (workspaceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedger', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳のコラボレーターの一覧を取得します。
         * @summary 台帳のコラボレーターの一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerCollaborator: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedgerCollaborator', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('searchLedgerCollaborator', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/collaborators`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の参加招待の一覧を取得します。
         * @summary 台帳の参加招待の一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceLedgerInvitationRolesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
         * @param {Array<WorkspaceLedgerInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceLedgerInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerInvitation: async (workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, exclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedgerInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('searchLedgerInvitation', 'workspaceInvitationId', workspaceInvitationId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/invitations`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exclusionMemberRoles) {
                localVarQueryParameter['exclusion_member_roles[]'] = exclusionMemberRoles;
            }

            if (inclusionMemberRoles) {
                localVarQueryParameter['inclusion_member_roles[]'] = inclusionMemberRoles;
            }

            if (exclusionInvitationStatuses) {
                localVarQueryParameter['exclusion_invitation_statuses[]'] = exclusionInvitationStatuses;
            }

            if (inclusionInvitationStatuses) {
                localVarQueryParameter['inclusion_invitation_statuses[]'] = inclusionInvitationStatuses;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の参加者の一覧を取得します。
         * @summary 台帳の参加者の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
         * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerMember: async (workspaceId: string, workspaceLedgerId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedgerMember', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('searchLedgerMember', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/members`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exclusionMemberRoles) {
                localVarQueryParameter['exclusion_member_roles[]'] = exclusionMemberRoles;
            }

            if (inclusionMemberRoles) {
                localVarQueryParameter['inclusion_member_roles[]'] = inclusionMemberRoles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の設定を取得します。
         * @summary 台帳の設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerSetting: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedgerSetting', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('searchLedgerSetting', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の取引の一覧を取得します。
         * @summary 台帳の取引の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerTransaction: async (workspaceId: string, workspaceLedgerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedgerTransaction', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('searchLedgerTransaction', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳の取引のコメント一覧を取得します。
         * @summary 台帳の取引のコメント一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerTransactionComment: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchLedgerTransactionComment', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('searchLedgerTransactionComment', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('searchLedgerTransactionComment', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]/comments`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークスペースの参加者一覧を取得します。
         * @summary ワークスペースの参加者一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {Array<WorkspaceMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
         * @param {Array<WorkspaceMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMember: async (workspaceId: string, exclusionMemberRoles?: Array<WorkspaceMemberRole>, inclusionMemberRoles?: Array<WorkspaceMemberRole>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchMember', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]/members`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exclusionMemberRoles) {
                localVarQueryParameter['exclusion_member_roles[]'] = exclusionMemberRoles;
            }

            if (inclusionMemberRoles) {
                localVarQueryParameter['inclusion_member_roles[]'] = inclusionMemberRoles;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ワークスペースの参加者グループの一覧を取得します。
         * @summary ワークスペースの参加者グループの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberGroup: async (workspaceId: string, workspaceMemberGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchMemberGroup', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('searchMemberGroup', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を取得します。
         * @summary ワークスペースの参加者グループの参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberGroupMembers: async (workspaceId: string, workspaceMemberGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchMemberGroupMembers', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('searchMemberGroupMembers', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups/[workspaceMemberGroupId]/members`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 台帳で使用する管理単位の一覧を取得します。
         * @summary 台帳で使用する管理単位の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUnit: async (workspaceId: string, workspaceUnitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('searchUnit', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceUnitId' is not null or undefined
            assertParamExists('searchUnit', 'workspaceUnitId', workspaceUnitId)
            const localVarPath = `/workspaces/[workspaceId]/units`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceUnitId"}}`, encodeURIComponent(String(workspaceUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースを更新します。
         * @summary ワークスペースの更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {Workspace} workspace ワークスペースの更新リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (workspaceId: string, workspace: Workspace, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('update', 'workspaceId', workspaceId)
            // verify required parameter 'workspace' is not null or undefined
            assertParamExists('update', 'workspace', workspace)
            const localVarPath = `/workspaces/[workspaceId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加招待を更新します。
         * @summary ワークスペースの参加招待の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvitation: async (workspaceId: string, workspaceInvitationId: string, workspaceInvitation: WorkspaceInvitation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('updateInvitation', 'workspaceInvitationId', workspaceInvitationId)
            // verify required parameter 'workspaceInvitation' is not null or undefined
            assertParamExists('updateInvitation', 'workspaceInvitation', workspaceInvitation)
            const localVarPath = `/workspaces/[workspaceId]/invitations/[workspaceInvitationId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceInvitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳を更新します。
         * @summary 台帳の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerUpdateRequestBody} [workspaceLedgerUpdateRequestBody] 台帳の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedger: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerUpdateRequestBody?: WorkspaceLedgerUpdateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedger', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedger', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerUpdateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の参加招待を更新します。
         * @summary 台帳の参加招待の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerInvitation: async (workspaceId: string, workspaceInvitationId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerInvitation', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceInvitationId' is not null or undefined
            assertParamExists('updateLedgerInvitation', 'workspaceInvitationId', workspaceInvitationId)
            // verify required parameter 'workspaceLedgerInvitation' is not null or undefined
            assertParamExists('updateLedgerInvitation', 'workspaceLedgerInvitation', workspaceLedgerInvitation)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/invitations/[workspaceInvitationId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceInvitationId"}}`, encodeURIComponent(String(workspaceInvitationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerInvitation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
         * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerMemberSecuritySettings} [workspaceLedgerMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerMemberSecuritySetting: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberSecuritySettings?: WorkspaceLedgerMemberSecuritySettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerMemberSecuritySetting', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerMemberSecuritySetting', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/members/[workspaceLedgerMemberId]/security-settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerMemberSecuritySettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳のアラート設定を更新します。
         * @summary 台帳のアラート設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingAlert} [workspaceLedgerSettingAlert] 台帳のアラート設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingAlert: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingAlert?: WorkspaceLedgerSettingAlert, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerSettingAlert', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerSettingAlert', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/alert`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerSettingAlert, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の残高設定を更新します。
         * @summary 台帳の残高設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingBalance} [workspaceLedgerSettingBalance] 台帳の残高設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingBalance: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingBalance?: WorkspaceLedgerSettingBalance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerSettingBalance', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerSettingBalance', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/balance`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerSettingBalance, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳のコラボレーション設定を更新します。
         * @summary 台帳のコラボレーション設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingCollaboration} [workspaceLedgerSettingCollaboration] 台帳のコラボレーション設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingCollaboration: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingCollaboration?: WorkspaceLedgerSettingCollaboration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerSettingCollaboration', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerSettingCollaboration', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/collaboration`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerSettingCollaboration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の目標設定を更新します。
         * @summary 台帳の目標設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingGoal} [workspaceLedgerSettingGoal] 台帳の目標設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingGoal: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingGoal?: WorkspaceLedgerSettingGoal, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerSettingGoal', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerSettingGoal', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/goal`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerSettingGoal, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の公開設定を更新します。
         * @summary 台帳の公開設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingPublication} [workspaceLedgerSettingPublication] 台帳の公開設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingPublication: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingPublication?: WorkspaceLedgerSettingPublication, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerSettingPublication', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerSettingPublication', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/publication`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerSettingPublication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の取引設定を更新します。
         * @summary 台帳の取引設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingTransaction} [workspaceLedgerSettingTransaction] 台帳の取引設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingTransaction: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingTransaction?: WorkspaceLedgerSettingTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerSettingTransaction', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerSettingTransaction', 'workspaceLedgerId', workspaceLedgerId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/settings/transaction`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerSettingTransaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳の取引のコメントを更新します。
         * @summary 台帳の取引のコメント更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {WorkspaceLedgerTransactionCommentUpdateRequestBody} [workspaceLedgerTransactionCommentUpdateRequestBody] 台帳の取引のコメントの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerTransactionComment: async (workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentUpdateRequestBody?: WorkspaceLedgerTransactionCommentUpdateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateLedgerTransactionComment', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceLedgerId' is not null or undefined
            assertParamExists('updateLedgerTransactionComment', 'workspaceLedgerId', workspaceLedgerId)
            // verify required parameter 'workspaceLedgerTransactionId' is not null or undefined
            assertParamExists('updateLedgerTransactionComment', 'workspaceLedgerTransactionId', workspaceLedgerTransactionId)
            const localVarPath = `/workspaces/[workspaceId]/ledgers/[workspaceLedgerId]/transactions/[workspaceLedgerTransactionId]/comments/[workspaceLedgerTransactionCommentId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceLedgerId"}}`, encodeURIComponent(String(workspaceLedgerId)))
                .replace(`{${"workspaceLedgerTransactionId"}}`, encodeURIComponent(String(workspaceLedgerTransactionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceLedgerTransactionCommentUpdateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースの参加者グループを更新します。
         * @summary ワークスペースの参加者グループの更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupUpdateRequestBody} [workspaceMemberGroupUpdateRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberGroup: async (workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupUpdateRequestBody?: WorkspaceMemberGroupUpdateRequestBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateMemberGroup', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceMemberGroupId' is not null or undefined
            assertParamExists('updateMemberGroup', 'workspaceMemberGroupId', workspaceMemberGroupId)
            const localVarPath = `/workspaces/[workspaceId]/member-groups/[workspaceMemberGroupId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceMemberGroupId"}}`, encodeURIComponent(String(workspaceMemberGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceMemberGroupUpdateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
         * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {WorkspaceMemberSecuritySettings} [workspaceMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberSecuritySetting: async (workspaceId: string, memberId: string, workspaceMemberSecuritySettings?: WorkspaceMemberSecuritySettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateMemberSecuritySetting', 'workspaceId', workspaceId)
            // verify required parameter 'memberId' is not null or undefined
            assertParamExists('updateMemberSecuritySetting', 'memberId', memberId)
            const localVarPath = `/workspaces/[workspaceId]/members/[memberId]/security-settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"memberId"}}`, encodeURIComponent(String(memberId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceMemberSecuritySettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用してワークスペースのセキュリティ設定を更新します。
         * @summary ワークスペースのセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceSecuritySettings} [workspaceSecuritySettings] ワークスペースのセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecuritySetting: async (workspaceId: string, workspaceSecuritySettings?: WorkspaceSecuritySettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateSecuritySetting', 'workspaceId', workspaceId)
            const localVarPath = `/workspaces/[workspaceId]/security-settings`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceSecuritySettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * IDを使用して台帳で使用する管理単位を更新します。
         * @summary 台帳で使用する管理単位の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の更新リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnit: async (workspaceId: string, workspaceUnitId: string, workspaceUnit: WorkspaceUnit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceId' is not null or undefined
            assertParamExists('updateUnit', 'workspaceId', workspaceId)
            // verify required parameter 'workspaceUnitId' is not null or undefined
            assertParamExists('updateUnit', 'workspaceUnitId', workspaceUnitId)
            // verify required parameter 'workspaceUnit' is not null or undefined
            assertParamExists('updateUnit', 'workspaceUnit', workspaceUnit)
            const localVarPath = `/workspaces/[workspaceId]/units/[workspaceUnitId]`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"workspaceUnitId"}}`, encodeURIComponent(String(workspaceUnitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(workspaceUnit, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceApi - functional programming interface
 * @export
 */
export const WorkspaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceApiAxiosParamCreator(configuration)
    return {
        /**
         * IDを使用してワークスペースを削除します。
         * @summary ワークスペースの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _delete(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._delete(workspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳のコラボレーターを追加します。
         * @summary 台帳のコラボレーターの追加を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerAddress1} [body] 台帳のコラボレーターの追加リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, body?: WorkspaceLedgerAddress1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerCollaborator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLedgerCollaborator(workspaceId, workspaceLedgerId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の参加者を追加します。
         * @summary 台帳の参加者の追加を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerMemberAddRequestBody} [workspaceLedgerMemberAddRequestBody] 台帳の参加者の追加リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addLedgerMember(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberAddRequestBody?: WorkspaceLedgerMemberAddRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerMemberAddSuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addLedgerMember(workspaceId, workspaceLedgerId, workspaceLedgerMemberAddRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を更新します。
         * @summary ワークスペースの参加者グループの参加者の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupMembersAddRequestBody} [workspaceMemberGroupMembersAddRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersAddRequestBody?: WorkspaceMemberGroupMembersAddRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberGroupMembers(workspaceId, workspaceMemberGroupId, workspaceMemberGroupMembersAddRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ワークスペースを作成します。
         * @summary ワークスペースの作成を行います。
         * @param {Workspace} workspace ワークスペースの新規作成リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(workspace: Workspace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(workspace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ワークスペースの参加招待を作成します。
         * @summary ワークスペースの参加招待の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvitation(workspaceId: string, workspaceInvitation: WorkspaceInvitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInvitation(workspaceId, workspaceInvitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerCreateRequestBody} [workspaceLedgerCreateRequestBody] 台帳の作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLedger(workspaceId: string, workspaceLedgerCreateRequestBody?: WorkspaceLedgerCreateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLedger(workspaceId, workspaceLedgerCreateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の参加招待を作成します。
         * @summary 台帳の参加招待の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLedgerInvitation(workspaceId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLedgerInvitation(workspaceId, workspaceLedgerInvitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の取引の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerTransactionCreateRequestBody} [workspaceLedgerTransactionCreateRequestBody] 台帳の取引の作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionCreateRequestBody?: WorkspaceLedgerTransactionCreateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionCreateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の取引のコメント作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {WorkspaceLedgerTransactionCommentCreateRequestBody} [workspaceLedgerTransactionCommentCreateRequestBody] 台帳の取引のコメントの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentCreateRequestBody?: WorkspaceLedgerTransactionCommentCreateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransactionComment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, workspaceLedgerTransactionCommentCreateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ワークスペースの参加者グループを作成します。
         * @summary ワークスペースの参加者グループの作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceMemberGroupCreateRequestBody} [workspaceMemberGroupCreateRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemberGroup(workspaceId: string, workspaceMemberGroupCreateRequestBody?: WorkspaceMemberGroupCreateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMemberGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemberGroup(workspaceId, workspaceMemberGroupCreateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳で使用する管理単位を作成します。
         * @summary 台帳で使用する管理単位の作成を行います。
         * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の新規作成リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUnit(workspaceUnit: WorkspaceUnit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUnit(workspaceUnit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加招待を削除します。
         * @summary ワークスペースの参加招待の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInvitation(workspaceId, workspaceInvitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLedger(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLedger(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳のコラボレーターを削除します。
         * @summary 台帳のコラボレーターの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLedgerCollaborator(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の参加招待を削除します。
         * @summary 台帳の参加招待の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLedgerInvitation(workspaceId, workspaceInvitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の参加者を削除します。
         * @summary 台帳の参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLedgerMember(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の取引の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の取引のコメント削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者を削除します。
         * @summary ワークスペースの参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMember(workspaceId: string, memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMember(workspaceId, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者グループを削除します。
         * @summary ワークスペースの参加者グループの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemberGroup(workspaceId, workspaceMemberGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を削除します。
         * @summary ワークスペースの参加者グループの参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupMembersDeleteRequestBody} [workspaceMemberGroupMembersDeleteRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersDeleteRequestBody?: WorkspaceMemberGroupMembersDeleteRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemberGroupMembers(workspaceId, workspaceMemberGroupId, workspaceMemberGroupMembersDeleteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳で使用する管理単位を削除します。
         * @summary 台帳で使用する管理単位の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUnit(workspaceId, workspaceUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースを取得します。
         * @summary ワークスペースの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async find(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.find(workspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加招待を取得します。
         * @summary ワークスペースの参加招待の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findInvitation(workspaceId, workspaceInvitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedger(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedger>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedger(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳のコラボレーターを取得します。
         * @summary 台帳のコラボレーターの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerCollaborator>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerCollaborator(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の参加招待を取得します。
         * @summary 台帳の参加招待の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerInvitation(workspaceId, workspaceInvitationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の参加者を取得します。
         * @summary 台帳の参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerMember(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
         * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerMemberSecuritySettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerMemberSecuritySetting(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳のアラート設定を取得します。
         * @summary 台帳のアラート設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerSettingAlert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerSettingAlert(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の残高設定を取得します。
         * @summary 台帳の残高設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerSettingBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerSettingBalance(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳のコラボレーション設定を取得します。
         * @summary 台帳のコラボレーション設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerSettingCollaboration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerSettingCollaboration(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の目標設定を取得します。
         * @summary 台帳の目標設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerSettingGoal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerSettingGoal(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の公開設定を取得します。
         * @summary 台帳の公開設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerSettingPublication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerSettingPublication(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の取引設定を取得します。
         * @summary 台帳の取引設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerSettingTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerSettingTransaction(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取引の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取引のコメント取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransactionComment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者を取得します。
         * @summary ワークスペースの参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMember(workspaceId: string, memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMember(workspaceId, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者グループを取得します。
         * @summary ワークスペースの参加者グループの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMemberGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMemberGroup(workspaceId, workspaceMemberGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
         * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findMemberSecuritySetting(workspaceId: string, memberId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMemberSecuritySettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findMemberSecuritySetting(workspaceId, memberId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースのセキュリティ設定を取得します。
         * @summary ワークスペースのセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findSecuritySetting(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceSecuritySettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findSecuritySetting(workspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳で使用する管理単位を取得します。
         * @summary 台帳で使用する管理単位の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUnit>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findUnit(workspaceId, workspaceUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーの所属するワークスペースの一覧を取得します。
         * @summary ワークスペースの一覧の取得を行います。
         * @param {string} [cursor] カーソルページネーションのカーソル位置です。
         * @param {number} [perPage] カーソルページネーションの表示件数です。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(cursor?: string, perPage?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspacesWithPagination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(cursor, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ワークスペースの参加招待の一覧を取得します。
         * @summary ワークスペースの参加招待の一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {Array<WorkspaceInvitationRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceInvitationRolesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceInvitationRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
         * @param {Array<WorkspaceInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceInvitationRole>, inclusionMemberRoles?: Array<WorkspaceInvitationRole>, exclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceInvitations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchInvitation(workspaceId, workspaceInvitationId, exclusionMemberRoles, inclusionMemberRoles, exclusionInvitationStatuses, inclusionInvitationStatuses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の一覧を取得します。
         * @summary 台帳の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedger(workspaceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedger(workspaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳のコラボレーターの一覧を取得します。
         * @summary 台帳のコラボレーターの一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerCollaborators>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedgerCollaborator(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の参加招待の一覧を取得します。
         * @summary 台帳の参加招待の一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceLedgerInvitationRolesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
         * @param {Array<WorkspaceLedgerInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceLedgerInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedgerInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, exclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerInvitations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedgerInvitation(workspaceId, workspaceInvitationId, exclusionMemberRoles, inclusionMemberRoles, exclusionInvitationStatuses, inclusionInvitationStatuses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の参加者の一覧を取得します。
         * @summary 台帳の参加者の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
         * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedgerMember(workspaceId: string, workspaceLedgerId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerMembers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedgerMember(workspaceId, workspaceLedgerId, exclusionMemberRoles, inclusionMemberRoles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の設定を取得します。
         * @summary 台帳の設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedgerSetting(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedgerSetting(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の取引の一覧を取得します。
         * @summary 台帳の取引の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedgerTransaction(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedgerTransaction(workspaceId, workspaceLedgerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳の取引のコメント一覧を取得します。
         * @summary 台帳の取引のコメント一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransactionComments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ワークスペースの参加者一覧を取得します。
         * @summary ワークスペースの参加者一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {Array<WorkspaceMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
         * @param {Array<WorkspaceMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMember(workspaceId: string, exclusionMemberRoles?: Array<WorkspaceMemberRole>, inclusionMemberRoles?: Array<WorkspaceMemberRole>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMembers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMember(workspaceId, exclusionMemberRoles, inclusionMemberRoles, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ワークスペースの参加者グループの一覧を取得します。
         * @summary ワークスペースの参加者グループの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMemberGroups>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMemberGroup(workspaceId, workspaceMemberGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を取得します。
         * @summary ワークスペースの参加者グループの参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceMemberGroupMembers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchMemberGroupMembers(workspaceId, workspaceMemberGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 台帳で使用する管理単位の一覧を取得します。
         * @summary 台帳で使用する管理単位の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceUnits>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUnit(workspaceId, workspaceUnitId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースを更新します。
         * @summary ワークスペースの更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {Workspace} workspace ワークスペースの更新リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(workspaceId: string, workspace: Workspace, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(workspaceId, workspace, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加招待を更新します。
         * @summary ワークスペースの参加招待の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvitation(workspaceId: string, workspaceInvitationId: string, workspaceInvitation: WorkspaceInvitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateInvitation(workspaceId, workspaceInvitationId, workspaceInvitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳を更新します。
         * @summary 台帳の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerUpdateRequestBody} [workspaceLedgerUpdateRequestBody] 台帳の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedger(workspaceId: string, workspaceLedgerId: string, workspaceLedgerUpdateRequestBody?: WorkspaceLedgerUpdateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedger(workspaceId, workspaceLedgerId, workspaceLedgerUpdateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の参加招待を更新します。
         * @summary 台帳の参加招待の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerInvitation(workspaceId: string, workspaceInvitationId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerInvitation(workspaceId, workspaceInvitationId, workspaceLedgerInvitation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
         * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerMemberSecuritySettings} [workspaceLedgerMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberSecuritySettings?: WorkspaceLedgerMemberSecuritySettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerMemberSecuritySetting(workspaceId, workspaceLedgerId, workspaceLedgerMemberSecuritySettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳のアラート設定を更新します。
         * @summary 台帳のアラート設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingAlert} [workspaceLedgerSettingAlert] 台帳のアラート設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingAlert?: WorkspaceLedgerSettingAlert, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerSettingAlert(workspaceId, workspaceLedgerId, workspaceLedgerSettingAlert, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の残高設定を更新します。
         * @summary 台帳の残高設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingBalance} [workspaceLedgerSettingBalance] 台帳の残高設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingBalance?: WorkspaceLedgerSettingBalance, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerSettingBalance(workspaceId, workspaceLedgerId, workspaceLedgerSettingBalance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳のコラボレーション設定を更新します。
         * @summary 台帳のコラボレーション設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingCollaboration} [workspaceLedgerSettingCollaboration] 台帳のコラボレーション設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingCollaboration?: WorkspaceLedgerSettingCollaboration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerSettingCollaboration(workspaceId, workspaceLedgerId, workspaceLedgerSettingCollaboration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の目標設定を更新します。
         * @summary 台帳の目標設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingGoal} [workspaceLedgerSettingGoal] 台帳の目標設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingGoal?: WorkspaceLedgerSettingGoal, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerSettingGoal(workspaceId, workspaceLedgerId, workspaceLedgerSettingGoal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の公開設定を更新します。
         * @summary 台帳の公開設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingPublication} [workspaceLedgerSettingPublication] 台帳の公開設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingPublication?: WorkspaceLedgerSettingPublication, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerSettingPublication(workspaceId, workspaceLedgerId, workspaceLedgerSettingPublication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の取引設定を更新します。
         * @summary 台帳の取引設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingTransaction} [workspaceLedgerSettingTransaction] 台帳の取引設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingTransaction?: WorkspaceLedgerSettingTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerSettingTransaction(workspaceId, workspaceLedgerId, workspaceLedgerSettingTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳の取引のコメントを更新します。
         * @summary 台帳の取引のコメント更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {WorkspaceLedgerTransactionCommentUpdateRequestBody} [workspaceLedgerTransactionCommentUpdateRequestBody] 台帳の取引のコメントの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentUpdateRequestBody?: WorkspaceLedgerTransactionCommentUpdateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceLedgerTransactionComment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, workspaceLedgerTransactionCommentUpdateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースの参加者グループを更新します。
         * @summary ワークスペースの参加者グループの更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupUpdateRequestBody} [workspaceMemberGroupUpdateRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberGroup(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupUpdateRequestBody?: WorkspaceMemberGroupUpdateRequestBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberGroup(workspaceId, workspaceMemberGroupId, workspaceMemberGroupUpdateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
         * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {WorkspaceMemberSecuritySettings} [workspaceMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemberSecuritySetting(workspaceId: string, memberId: string, workspaceMemberSecuritySettings?: WorkspaceMemberSecuritySettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemberSecuritySetting(workspaceId, memberId, workspaceMemberSecuritySettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用してワークスペースのセキュリティ設定を更新します。
         * @summary ワークスペースのセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceSecuritySettings} [workspaceSecuritySettings] ワークスペースのセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSecuritySetting(workspaceId: string, workspaceSecuritySettings?: WorkspaceSecuritySettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSecuritySetting(workspaceId, workspaceSecuritySettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * IDを使用して台帳で使用する管理単位を更新します。
         * @summary 台帳で使用する管理単位の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の更新リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUnit(workspaceId: string, workspaceUnitId: string, workspaceUnit: WorkspaceUnit, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUnit(workspaceId, workspaceUnitId, workspaceUnit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkspaceApi - factory interface
 * @export
 */
export const WorkspaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceApiFp(configuration)
    return {
        /**
         * IDを使用してワークスペースを削除します。
         * @summary ワークスペースの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _delete(workspaceId: string, options?: any): AxiosPromise<void> {
            return localVarFp._delete(workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳のコラボレーターを追加します。
         * @summary 台帳のコラボレーターの追加を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerAddress1} [body] 台帳のコラボレーターの追加リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, body?: WorkspaceLedgerAddress1, options?: any): AxiosPromise<WorkspaceLedgerCollaborator> {
            return localVarFp.addLedgerCollaborator(workspaceId, workspaceLedgerId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の参加者を追加します。
         * @summary 台帳の参加者の追加を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerMemberAddRequestBody} [workspaceLedgerMemberAddRequestBody] 台帳の参加者の追加リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addLedgerMember(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberAddRequestBody?: WorkspaceLedgerMemberAddRequestBody, options?: any): AxiosPromise<WorkspaceLedgerMemberAddSuccessResponse> {
            return localVarFp.addLedgerMember(workspaceId, workspaceLedgerId, workspaceLedgerMemberAddRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を更新します。
         * @summary ワークスペースの参加者グループの参加者の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupMembersAddRequestBody} [workspaceMemberGroupMembersAddRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersAddRequestBody?: WorkspaceMemberGroupMembersAddRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.addMemberGroupMembers(workspaceId, workspaceMemberGroupId, workspaceMemberGroupMembersAddRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークスペースを作成します。
         * @summary ワークスペースの作成を行います。
         * @param {Workspace} workspace ワークスペースの新規作成リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(workspace: Workspace, options?: any): AxiosPromise<Workspace> {
            return localVarFp.create(workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークスペースの参加招待を作成します。
         * @summary ワークスペースの参加招待の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvitation(workspaceId: string, workspaceInvitation: WorkspaceInvitation, options?: any): AxiosPromise<WorkspaceInvitation> {
            return localVarFp.createInvitation(workspaceId, workspaceInvitation, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerCreateRequestBody} [workspaceLedgerCreateRequestBody] 台帳の作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedger(workspaceId: string, workspaceLedgerCreateRequestBody?: WorkspaceLedgerCreateRequestBody, options?: any): AxiosPromise<WorkspaceLedger> {
            return localVarFp.createLedger(workspaceId, workspaceLedgerCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の参加招待を作成します。
         * @summary 台帳の参加招待の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedgerInvitation(workspaceId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: any): AxiosPromise<WorkspaceLedgerInvitation> {
            return localVarFp.createLedgerInvitation(workspaceId, workspaceLedgerInvitation, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の取引の作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerTransactionCreateRequestBody} [workspaceLedgerTransactionCreateRequestBody] 台帳の取引の作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionCreateRequestBody?: WorkspaceLedgerTransactionCreateRequestBody, options?: any): AxiosPromise<WorkspaceLedgerTransaction> {
            return localVarFp.createLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳を作成します。
         * @summary 台帳の取引のコメント作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {WorkspaceLedgerTransactionCommentCreateRequestBody} [workspaceLedgerTransactionCommentCreateRequestBody] 台帳の取引のコメントの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentCreateRequestBody?: WorkspaceLedgerTransactionCommentCreateRequestBody, options?: any): AxiosPromise<WorkspaceLedgerTransactionComment> {
            return localVarFp.createLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, workspaceLedgerTransactionCommentCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークスペースの参加者グループを作成します。
         * @summary ワークスペースの参加者グループの作成を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceMemberGroupCreateRequestBody} [workspaceMemberGroupCreateRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemberGroup(workspaceId: string, workspaceMemberGroupCreateRequestBody?: WorkspaceMemberGroupCreateRequestBody, options?: any): AxiosPromise<WorkspaceMemberGroup> {
            return localVarFp.createMemberGroup(workspaceId, workspaceMemberGroupCreateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳で使用する管理単位を作成します。
         * @summary 台帳で使用する管理単位の作成を行います。
         * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の新規作成リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUnit(workspaceUnit: WorkspaceUnit, options?: any): AxiosPromise<WorkspaceUnit> {
            return localVarFp.createUnit(workspaceUnit, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加招待を削除します。
         * @summary ワークスペースの参加招待の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvitation(workspaceId: string, workspaceInvitationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedger(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLedger(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳のコラボレーターを削除します。
         * @summary 台帳のコラボレーターの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLedgerCollaborator(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の参加招待を削除します。
         * @summary 台帳の参加招待の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLedgerInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の参加者を削除します。
         * @summary 台帳の参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLedgerMember(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の取引の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を削除します。
         * @summary 台帳の取引のコメント削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者を削除します。
         * @summary ワークスペースの参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMember(workspaceId: string, memberId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMember(workspaceId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者グループを削除します。
         * @summary ワークスペースの参加者グループの削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMemberGroup(workspaceId, workspaceMemberGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を削除します。
         * @summary ワークスペースの参加者グループの参加者の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupMembersDeleteRequestBody} [workspaceMemberGroupMembersDeleteRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersDeleteRequestBody?: WorkspaceMemberGroupMembersDeleteRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMemberGroupMembers(workspaceId, workspaceMemberGroupId, workspaceMemberGroupMembersDeleteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳で使用する管理単位を削除します。
         * @summary 台帳で使用する管理単位の削除を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUnit(workspaceId: string, workspaceUnitId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUnit(workspaceId, workspaceUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースを取得します。
         * @summary ワークスペースの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        find(workspaceId: string, options?: any): AxiosPromise<Workspace> {
            return localVarFp.find(workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加招待を取得します。
         * @summary ワークスペースの参加招待の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInvitation(workspaceId: string, workspaceInvitationId: string, options?: any): AxiosPromise<WorkspaceInvitation> {
            return localVarFp.findInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedger(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedger> {
            return localVarFp.findLedger(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳のコラボレーターを取得します。
         * @summary 台帳のコラボレーターの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: any): AxiosPromise<WorkspaceLedgerCollaborator> {
            return localVarFp.findLedgerCollaborator(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の参加招待を取得します。
         * @summary 台帳の参加招待の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: any): AxiosPromise<WorkspaceLedgerInvitation> {
            return localVarFp.findLedgerInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の参加者を取得します。
         * @summary 台帳の参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerMember> {
            return localVarFp.findLedgerMember(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
         * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerMemberSecuritySettings> {
            return localVarFp.findLedgerMemberSecuritySetting(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳のアラート設定を取得します。
         * @summary 台帳のアラート設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerSettingAlert> {
            return localVarFp.findLedgerSettingAlert(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の残高設定を取得します。
         * @summary 台帳の残高設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerSettingBalance> {
            return localVarFp.findLedgerSettingBalance(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳のコラボレーション設定を取得します。
         * @summary 台帳のコラボレーション設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerSettingCollaboration> {
            return localVarFp.findLedgerSettingCollaboration(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の目標設定を取得します。
         * @summary 台帳の目標設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerSettingGoal> {
            return localVarFp.findLedgerSettingGoal(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の公開設定を取得します。
         * @summary 台帳の公開設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerSettingPublication> {
            return localVarFp.findLedgerSettingPublication(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の取引設定を取得します。
         * @summary 台帳の取引設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerSettingTransaction> {
            return localVarFp.findLedgerSettingTransaction(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取引の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: any): AxiosPromise<WorkspaceLedgerTransaction> {
            return localVarFp.findLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を取得します。
         * @summary 台帳の取引のコメント取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: any): AxiosPromise<WorkspaceLedgerTransactionComment> {
            return localVarFp.findLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者を取得します。
         * @summary ワークスペースの参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMember(workspaceId: string, memberId: string, options?: any): AxiosPromise<WorkspaceMember> {
            return localVarFp.findMember(workspaceId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者グループを取得します。
         * @summary ワークスペースの参加者グループの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: any): AxiosPromise<WorkspaceMemberGroup> {
            return localVarFp.findMemberGroup(workspaceId, workspaceMemberGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
         * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findMemberSecuritySetting(workspaceId: string, memberId: string, options?: any): AxiosPromise<WorkspaceMemberSecuritySettings> {
            return localVarFp.findMemberSecuritySetting(workspaceId, memberId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースのセキュリティ設定を取得します。
         * @summary ワークスペースのセキュリティ設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findSecuritySetting(workspaceId: string, options?: any): AxiosPromise<WorkspaceSecuritySettings> {
            return localVarFp.findSecuritySetting(workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳で使用する管理単位を取得します。
         * @summary 台帳で使用する管理単位の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findUnit(workspaceId: string, workspaceUnitId: string, options?: any): AxiosPromise<WorkspaceUnit> {
            return localVarFp.findUnit(workspaceId, workspaceUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーの所属するワークスペースの一覧を取得します。
         * @summary ワークスペースの一覧の取得を行います。
         * @param {string} [cursor] カーソルページネーションのカーソル位置です。
         * @param {number} [perPage] カーソルページネーションの表示件数です。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(cursor?: string, perPage?: number, options?: any): AxiosPromise<WorkspacesWithPagination> {
            return localVarFp.search(cursor, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークスペースの参加招待の一覧を取得します。
         * @summary ワークスペースの参加招待の一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {Array<WorkspaceInvitationRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceInvitationRolesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceInvitationRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
         * @param {Array<WorkspaceInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceInvitationRole>, inclusionMemberRoles?: Array<WorkspaceInvitationRole>, exclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, options?: any): AxiosPromise<WorkspaceInvitations> {
            return localVarFp.searchInvitation(workspaceId, workspaceInvitationId, exclusionMemberRoles, inclusionMemberRoles, exclusionInvitationStatuses, inclusionInvitationStatuses, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の一覧を取得します。
         * @summary 台帳の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedger(workspaceId: string, options?: any): AxiosPromise<WorkspaceLedgers> {
            return localVarFp.searchLedger(workspaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳のコラボレーターの一覧を取得します。
         * @summary 台帳のコラボレーターの一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerCollaborators> {
            return localVarFp.searchLedgerCollaborator(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の参加招待の一覧を取得します。
         * @summary 台帳の参加招待の一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceLedgerInvitationRolesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
         * @param {Array<WorkspaceLedgerInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
         * @param {Array<WorkspaceLedgerInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, exclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, options?: any): AxiosPromise<WorkspaceLedgerInvitations> {
            return localVarFp.searchLedgerInvitation(workspaceId, workspaceInvitationId, exclusionMemberRoles, inclusionMemberRoles, exclusionInvitationStatuses, inclusionInvitationStatuses, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の参加者の一覧を取得します。
         * @summary 台帳の参加者の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
         * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerMember(workspaceId: string, workspaceLedgerId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, options?: any): AxiosPromise<WorkspaceLedgerMembers> {
            return localVarFp.searchLedgerMember(workspaceId, workspaceLedgerId, exclusionMemberRoles, inclusionMemberRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の設定を取得します。
         * @summary 台帳の設定の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerSetting(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<any> {
            return localVarFp.searchLedgerSetting(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の取引の一覧を取得します。
         * @summary 台帳の取引の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerTransaction(workspaceId: string, workspaceLedgerId: string, options?: any): AxiosPromise<WorkspaceLedgerTransactions> {
            return localVarFp.searchLedgerTransaction(workspaceId, workspaceLedgerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳の取引のコメント一覧を取得します。
         * @summary 台帳の取引のコメント一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: any): AxiosPromise<WorkspaceLedgerTransactionComments> {
            return localVarFp.searchLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークスペースの参加者一覧を取得します。
         * @summary ワークスペースの参加者一覧の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {Array<WorkspaceMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
         * @param {Array<WorkspaceMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMember(workspaceId: string, exclusionMemberRoles?: Array<WorkspaceMemberRole>, inclusionMemberRoles?: Array<WorkspaceMemberRole>, options?: any): AxiosPromise<WorkspaceMembers> {
            return localVarFp.searchMember(workspaceId, exclusionMemberRoles, inclusionMemberRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * ワークスペースの参加者グループの一覧を取得します。
         * @summary ワークスペースの参加者グループの取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: any): AxiosPromise<WorkspaceMemberGroups> {
            return localVarFp.searchMemberGroup(workspaceId, workspaceMemberGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者グループの参加者を取得します。
         * @summary ワークスペースの参加者グループの参加者の取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, options?: any): AxiosPromise<WorkspaceMemberGroupMembers> {
            return localVarFp.searchMemberGroupMembers(workspaceId, workspaceMemberGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 台帳で使用する管理単位の一覧を取得します。
         * @summary 台帳で使用する管理単位の一覧取得を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUnit(workspaceId: string, workspaceUnitId: string, options?: any): AxiosPromise<WorkspaceUnits> {
            return localVarFp.searchUnit(workspaceId, workspaceUnitId, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースを更新します。
         * @summary ワークスペースの更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {Workspace} workspace ワークスペースの更新リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(workspaceId: string, workspace: Workspace, options?: any): AxiosPromise<void> {
            return localVarFp.update(workspaceId, workspace, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加招待を更新します。
         * @summary ワークスペースの参加招待の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvitation(workspaceId: string, workspaceInvitationId: string, workspaceInvitation: WorkspaceInvitation, options?: any): AxiosPromise<void> {
            return localVarFp.updateInvitation(workspaceId, workspaceInvitationId, workspaceInvitation, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳を更新します。
         * @summary 台帳の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerUpdateRequestBody} [workspaceLedgerUpdateRequestBody] 台帳の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedger(workspaceId: string, workspaceLedgerId: string, workspaceLedgerUpdateRequestBody?: WorkspaceLedgerUpdateRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedger(workspaceId, workspaceLedgerId, workspaceLedgerUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の参加招待を更新します。
         * @summary 台帳の参加招待の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceInvitationId 参加者招待IDです。
         * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerInvitation(workspaceId: string, workspaceInvitationId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerInvitation(workspaceId, workspaceInvitationId, workspaceLedgerInvitation, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
         * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerMemberSecuritySettings} [workspaceLedgerMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberSecuritySettings?: WorkspaceLedgerMemberSecuritySettings, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerMemberSecuritySetting(workspaceId, workspaceLedgerId, workspaceLedgerMemberSecuritySettings, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳のアラート設定を更新します。
         * @summary 台帳のアラート設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingAlert} [workspaceLedgerSettingAlert] 台帳のアラート設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingAlert?: WorkspaceLedgerSettingAlert, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerSettingAlert(workspaceId, workspaceLedgerId, workspaceLedgerSettingAlert, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の残高設定を更新します。
         * @summary 台帳の残高設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingBalance} [workspaceLedgerSettingBalance] 台帳の残高設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingBalance?: WorkspaceLedgerSettingBalance, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerSettingBalance(workspaceId, workspaceLedgerId, workspaceLedgerSettingBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳のコラボレーション設定を更新します。
         * @summary 台帳のコラボレーション設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingCollaboration} [workspaceLedgerSettingCollaboration] 台帳のコラボレーション設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingCollaboration?: WorkspaceLedgerSettingCollaboration, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerSettingCollaboration(workspaceId, workspaceLedgerId, workspaceLedgerSettingCollaboration, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の目標設定を更新します。
         * @summary 台帳の目標設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingGoal} [workspaceLedgerSettingGoal] 台帳の目標設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingGoal?: WorkspaceLedgerSettingGoal, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerSettingGoal(workspaceId, workspaceLedgerId, workspaceLedgerSettingGoal, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の公開設定を更新します。
         * @summary 台帳の公開設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingPublication} [workspaceLedgerSettingPublication] 台帳の公開設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingPublication?: WorkspaceLedgerSettingPublication, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerSettingPublication(workspaceId, workspaceLedgerId, workspaceLedgerSettingPublication, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の取引設定を更新します。
         * @summary 台帳の取引設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {WorkspaceLedgerSettingTransaction} [workspaceLedgerSettingTransaction] 台帳の取引設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingTransaction?: WorkspaceLedgerSettingTransaction, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedgerSettingTransaction(workspaceId, workspaceLedgerId, workspaceLedgerSettingTransaction, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳の取引のコメントを更新します。
         * @summary 台帳の取引のコメント更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceLedgerId 台帳のIDです。
         * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
         * @param {WorkspaceLedgerTransactionCommentUpdateRequestBody} [workspaceLedgerTransactionCommentUpdateRequestBody] 台帳の取引のコメントの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentUpdateRequestBody?: WorkspaceLedgerTransactionCommentUpdateRequestBody, options?: any): AxiosPromise<WorkspaceLedgerTransactionComment> {
            return localVarFp.updateLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, workspaceLedgerTransactionCommentUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースの参加者グループを更新します。
         * @summary ワークスペースの参加者グループの更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceMemberGroupId 参加者グループのIDです。
         * @param {WorkspaceMemberGroupUpdateRequestBody} [workspaceMemberGroupUpdateRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberGroup(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupUpdateRequestBody?: WorkspaceMemberGroupUpdateRequestBody, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberGroup(workspaceId, workspaceMemberGroupId, workspaceMemberGroupUpdateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
         * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} memberId 参加者のIDです。
         * @param {WorkspaceMemberSecuritySettings} [workspaceMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemberSecuritySetting(workspaceId: string, memberId: string, workspaceMemberSecuritySettings?: WorkspaceMemberSecuritySettings, options?: any): AxiosPromise<void> {
            return localVarFp.updateMemberSecuritySetting(workspaceId, memberId, workspaceMemberSecuritySettings, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用してワークスペースのセキュリティ設定を更新します。
         * @summary ワークスペースのセキュリティ設定の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {WorkspaceSecuritySettings} [workspaceSecuritySettings] ワークスペースのセキュリティー設定の更新リクエストのボディです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSecuritySetting(workspaceId: string, workspaceSecuritySettings?: WorkspaceSecuritySettings, options?: any): AxiosPromise<void> {
            return localVarFp.updateSecuritySetting(workspaceId, workspaceSecuritySettings, options).then((request) => request(axios, basePath));
        },
        /**
         * IDを使用して台帳で使用する管理単位を更新します。
         * @summary 台帳で使用する管理単位の更新を行います。
         * @param {string} workspaceId ワークスペースのIDです。
         * @param {string} workspaceUnitId 台帳の管理単位のIDです。
         * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の更新リクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUnit(workspaceId: string, workspaceUnitId: string, workspaceUnit: WorkspaceUnit, options?: any): AxiosPromise<void> {
            return localVarFp.updateUnit(workspaceId, workspaceUnitId, workspaceUnit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkspaceApi - interface
 * @export
 * @interface WorkspaceApi
 */
export interface WorkspaceApiInterface {
    /**
     * IDを使用してワークスペースを削除します。
     * @summary ワークスペースの削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    _delete(workspaceId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 台帳のコラボレーターを追加します。
     * @summary 台帳のコラボレーターの追加を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerAddress1} [body] 台帳のコラボレーターの追加リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, body?: WorkspaceLedgerAddress1, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerCollaborator>;

    /**
     * 台帳の参加者を追加します。
     * @summary 台帳の参加者の追加を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerMemberAddRequestBody} [workspaceLedgerMemberAddRequestBody] 台帳の参加者の追加リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addLedgerMember(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberAddRequestBody?: WorkspaceLedgerMemberAddRequestBody, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerMemberAddSuccessResponse>;

    /**
     * IDを使用してワークスペースの参加者グループの参加者を更新します。
     * @summary ワークスペースの参加者グループの参加者の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {WorkspaceMemberGroupMembersAddRequestBody} [workspaceMemberGroupMembersAddRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    addMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersAddRequestBody?: WorkspaceMemberGroupMembersAddRequestBody, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * ワークスペースを作成します。
     * @summary ワークスペースの作成を行います。
     * @param {Workspace} workspace ワークスペースの新規作成リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    create(workspace: Workspace, options?: AxiosRequestConfig): AxiosPromise<Workspace>;

    /**
     * ワークスペースの参加招待を作成します。
     * @summary ワークスペースの参加招待の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createInvitation(workspaceId: string, workspaceInvitation: WorkspaceInvitation, options?: AxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;

    /**
     * 台帳を作成します。
     * @summary 台帳の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerCreateRequestBody} [workspaceLedgerCreateRequestBody] 台帳の作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createLedger(workspaceId: string, workspaceLedgerCreateRequestBody?: WorkspaceLedgerCreateRequestBody, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedger>;

    /**
     * 台帳の参加招待を作成します。
     * @summary 台帳の参加招待の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createLedgerInvitation(workspaceId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerInvitation>;

    /**
     * 台帳を作成します。
     * @summary 台帳の取引の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerTransactionCreateRequestBody} [workspaceLedgerTransactionCreateRequestBody] 台帳の取引の作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionCreateRequestBody?: WorkspaceLedgerTransactionCreateRequestBody, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransaction>;

    /**
     * 台帳を作成します。
     * @summary 台帳の取引のコメント作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {WorkspaceLedgerTransactionCommentCreateRequestBody} [workspaceLedgerTransactionCommentCreateRequestBody] 台帳の取引のコメントの作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentCreateRequestBody?: WorkspaceLedgerTransactionCommentCreateRequestBody, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransactionComment>;

    /**
     * ワークスペースの参加者グループを作成します。
     * @summary ワークスペースの参加者グループの作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceMemberGroupCreateRequestBody} [workspaceMemberGroupCreateRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createMemberGroup(workspaceId: string, workspaceMemberGroupCreateRequestBody?: WorkspaceMemberGroupCreateRequestBody, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMemberGroup>;

    /**
     * 台帳で使用する管理単位を作成します。
     * @summary 台帳で使用する管理単位の作成を行います。
     * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の新規作成リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    createUnit(workspaceUnit: WorkspaceUnit, options?: AxiosRequestConfig): AxiosPromise<WorkspaceUnit>;

    /**
     * IDを使用してワークスペースの参加招待を削除します。
     * @summary ワークスペースの参加招待の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳を削除します。
     * @summary 台帳の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteLedger(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳のコラボレーターを削除します。
     * @summary 台帳のコラボレーターの削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の参加招待を削除します。
     * @summary 台帳の参加招待の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の参加者を削除します。
     * @summary 台帳の参加者の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳を削除します。
     * @summary 台帳の取引の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳を削除します。
     * @summary 台帳の取引のコメント削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペースの参加者を削除します。
     * @summary ワークスペースの参加者の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteMember(workspaceId: string, memberId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペースの参加者グループを削除します。
     * @summary ワークスペースの参加者グループの削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペースの参加者グループの参加者を削除します。
     * @summary ワークスペースの参加者グループの参加者の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {WorkspaceMemberGroupMembersDeleteRequestBody} [workspaceMemberGroupMembersDeleteRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersDeleteRequestBody?: WorkspaceMemberGroupMembersDeleteRequestBody, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳で使用する管理単位を削除します。
     * @summary 台帳で使用する管理単位の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    deleteUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペースを取得します。
     * @summary ワークスペースの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    find(workspaceId: string, options?: AxiosRequestConfig): AxiosPromise<Workspace>;

    /**
     * IDを使用してワークスペースの参加招待を取得します。
     * @summary ワークスペースの参加招待の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceInvitation>;

    /**
     * IDを使用して台帳を取得します。
     * @summary 台帳の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedger(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedger>;

    /**
     * IDを使用して台帳のコラボレーターを取得します。
     * @summary 台帳のコラボレーターの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerCollaborator>;

    /**
     * IDを使用して台帳の参加招待を取得します。
     * @summary 台帳の参加招待の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerInvitation>;

    /**
     * IDを使用して台帳の参加者を取得します。
     * @summary 台帳の参加者の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerMember>;

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
     * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerMemberSecuritySettings>;

    /**
     * IDを使用して台帳のアラート設定を取得します。
     * @summary 台帳のアラート設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerSettingAlert>;

    /**
     * IDを使用して台帳の残高設定を取得します。
     * @summary 台帳の残高設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerSettingBalance>;

    /**
     * IDを使用して台帳のコラボレーション設定を取得します。
     * @summary 台帳のコラボレーション設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerSettingCollaboration>;

    /**
     * IDを使用して台帳の目標設定を取得します。
     * @summary 台帳の目標設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerSettingGoal>;

    /**
     * IDを使用して台帳の公開設定を取得します。
     * @summary 台帳の公開設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerSettingPublication>;

    /**
     * IDを使用して台帳の取引設定を取得します。
     * @summary 台帳の取引設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerSettingTransaction>;

    /**
     * IDを使用して台帳を取得します。
     * @summary 台帳の取引の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransaction>;

    /**
     * IDを使用して台帳を取得します。
     * @summary 台帳の取引のコメント取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransactionComment>;

    /**
     * IDを使用してワークスペースの参加者を取得します。
     * @summary ワークスペースの参加者の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findMember(workspaceId: string, memberId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMember>;

    /**
     * IDを使用してワークスペースの参加者グループを取得します。
     * @summary ワークスペースの参加者グループの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMemberGroup>;

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
     * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findMemberSecuritySetting(workspaceId: string, memberId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMemberSecuritySettings>;

    /**
     * IDを使用してワークスペースのセキュリティ設定を取得します。
     * @summary ワークスペースのセキュリティ設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findSecuritySetting(workspaceId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceSecuritySettings>;

    /**
     * IDを使用して台帳で使用する管理単位を取得します。
     * @summary 台帳で使用する管理単位の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    findUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceUnit>;

    /**
     * ユーザーの所属するワークスペースの一覧を取得します。
     * @summary ワークスペースの一覧の取得を行います。
     * @param {string} [cursor] カーソルページネーションのカーソル位置です。
     * @param {number} [perPage] カーソルページネーションの表示件数です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    search(cursor?: string, perPage?: number, options?: AxiosRequestConfig): AxiosPromise<WorkspacesWithPagination>;

    /**
     * ワークスペースの参加招待の一覧を取得します。
     * @summary ワークスペースの参加招待の一覧の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {Array<WorkspaceInvitationRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceInvitationRolesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceInvitationRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
     * @param {Array<WorkspaceInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceInvitationRole>, inclusionMemberRoles?: Array<WorkspaceInvitationRole>, exclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, options?: AxiosRequestConfig): AxiosPromise<WorkspaceInvitations>;

    /**
     * 台帳の一覧を取得します。
     * @summary 台帳の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedger(workspaceId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgers>;

    /**
     * 台帳のコラボレーターの一覧を取得します。
     * @summary 台帳のコラボレーターの一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerCollaborators>;

    /**
     * 台帳の参加招待の一覧を取得します。
     * @summary 台帳の参加招待の一覧の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceLedgerInvitationRolesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
     * @param {Array<WorkspaceLedgerInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceLedgerInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedgerInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, exclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerInvitations>;

    /**
     * 台帳の参加者の一覧を取得します。
     * @summary 台帳の参加者の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
     * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedgerMember(workspaceId: string, workspaceLedgerId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerMembers>;

    /**
     * IDを使用して台帳の設定を取得します。
     * @summary 台帳の設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedgerSetting(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 台帳の取引の一覧を取得します。
     * @summary 台帳の取引の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedgerTransaction(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransactions>;

    /**
     * 台帳の取引のコメント一覧を取得します。
     * @summary 台帳の取引のコメント一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransactionComments>;

    /**
     * ワークスペースの参加者一覧を取得します。
     * @summary ワークスペースの参加者一覧の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {Array<WorkspaceMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
     * @param {Array<WorkspaceMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchMember(workspaceId: string, exclusionMemberRoles?: Array<WorkspaceMemberRole>, inclusionMemberRoles?: Array<WorkspaceMemberRole>, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMembers>;

    /**
     * ワークスペースの参加者グループの一覧を取得します。
     * @summary ワークスペースの参加者グループの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMemberGroups>;

    /**
     * IDを使用してワークスペースの参加者グループの参加者を取得します。
     * @summary ワークスペースの参加者グループの参加者の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceMemberGroupMembers>;

    /**
     * 台帳で使用する管理単位の一覧を取得します。
     * @summary 台帳で使用する管理単位の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    searchUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig): AxiosPromise<WorkspaceUnits>;

    /**
     * IDを使用してワークスペースを更新します。
     * @summary ワークスペースの更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {Workspace} workspace ワークスペースの更新リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    update(workspaceId: string, workspace: Workspace, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペースの参加招待を更新します。
     * @summary ワークスペースの参加招待の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateInvitation(workspaceId: string, workspaceInvitationId: string, workspaceInvitation: WorkspaceInvitation, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳を更新します。
     * @summary 台帳の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerUpdateRequestBody} [workspaceLedgerUpdateRequestBody] 台帳の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedger(workspaceId: string, workspaceLedgerId: string, workspaceLedgerUpdateRequestBody?: WorkspaceLedgerUpdateRequestBody, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の参加招待を更新します。
     * @summary 台帳の参加招待の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerInvitation(workspaceId: string, workspaceInvitationId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
     * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerMemberSecuritySettings} [workspaceLedgerMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberSecuritySettings?: WorkspaceLedgerMemberSecuritySettings, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳のアラート設定を更新します。
     * @summary 台帳のアラート設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingAlert} [workspaceLedgerSettingAlert] 台帳のアラート設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingAlert?: WorkspaceLedgerSettingAlert, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の残高設定を更新します。
     * @summary 台帳の残高設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingBalance} [workspaceLedgerSettingBalance] 台帳の残高設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingBalance?: WorkspaceLedgerSettingBalance, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳のコラボレーション設定を更新します。
     * @summary 台帳のコラボレーション設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingCollaboration} [workspaceLedgerSettingCollaboration] 台帳のコラボレーション設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingCollaboration?: WorkspaceLedgerSettingCollaboration, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の目標設定を更新します。
     * @summary 台帳の目標設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingGoal} [workspaceLedgerSettingGoal] 台帳の目標設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingGoal?: WorkspaceLedgerSettingGoal, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の公開設定を更新します。
     * @summary 台帳の公開設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingPublication} [workspaceLedgerSettingPublication] 台帳の公開設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingPublication?: WorkspaceLedgerSettingPublication, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の取引設定を更新します。
     * @summary 台帳の取引設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingTransaction} [workspaceLedgerSettingTransaction] 台帳の取引設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingTransaction?: WorkspaceLedgerSettingTransaction, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳の取引のコメントを更新します。
     * @summary 台帳の取引のコメント更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {WorkspaceLedgerTransactionCommentUpdateRequestBody} [workspaceLedgerTransactionCommentUpdateRequestBody] 台帳の取引のコメントの更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentUpdateRequestBody?: WorkspaceLedgerTransactionCommentUpdateRequestBody, options?: AxiosRequestConfig): AxiosPromise<WorkspaceLedgerTransactionComment>;

    /**
     * IDを使用してワークスペースの参加者グループを更新します。
     * @summary ワークスペースの参加者グループの更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {WorkspaceMemberGroupUpdateRequestBody} [workspaceMemberGroupUpdateRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateMemberGroup(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupUpdateRequestBody?: WorkspaceMemberGroupUpdateRequestBody, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
     * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {WorkspaceMemberSecuritySettings} [workspaceMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateMemberSecuritySetting(workspaceId: string, memberId: string, workspaceMemberSecuritySettings?: WorkspaceMemberSecuritySettings, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用してワークスペースのセキュリティ設定を更新します。
     * @summary ワークスペースのセキュリティ設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceSecuritySettings} [workspaceSecuritySettings] ワークスペースのセキュリティー設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateSecuritySetting(workspaceId: string, workspaceSecuritySettings?: WorkspaceSecuritySettings, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * IDを使用して台帳で使用する管理単位を更新します。
     * @summary 台帳で使用する管理単位の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の更新リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApiInterface
     */
    updateUnit(workspaceId: string, workspaceUnitId: string, workspaceUnit: WorkspaceUnit, options?: AxiosRequestConfig): AxiosPromise<void>;

}

/**
 * WorkspaceApi - object-oriented interface
 * @export
 * @class WorkspaceApi
 * @extends {BaseAPI}
 */
export class WorkspaceApi extends BaseAPI implements WorkspaceApiInterface {
    /**
     * IDを使用してワークスペースを削除します。
     * @summary ワークスペースの削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public _delete(workspaceId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration)._delete(workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳のコラボレーターを追加します。
     * @summary 台帳のコラボレーターの追加を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerAddress1} [body] 台帳のコラボレーターの追加リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public addLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, body?: WorkspaceLedgerAddress1, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).addLedgerCollaborator(workspaceId, workspaceLedgerId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の参加者を追加します。
     * @summary 台帳の参加者の追加を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerMemberAddRequestBody} [workspaceLedgerMemberAddRequestBody] 台帳の参加者の追加リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public addLedgerMember(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberAddRequestBody?: WorkspaceLedgerMemberAddRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).addLedgerMember(workspaceId, workspaceLedgerId, workspaceLedgerMemberAddRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者グループの参加者を更新します。
     * @summary ワークスペースの参加者グループの参加者の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {WorkspaceMemberGroupMembersAddRequestBody} [workspaceMemberGroupMembersAddRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public addMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersAddRequestBody?: WorkspaceMemberGroupMembersAddRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).addMemberGroupMembers(workspaceId, workspaceMemberGroupId, workspaceMemberGroupMembersAddRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークスペースを作成します。
     * @summary ワークスペースの作成を行います。
     * @param {Workspace} workspace ワークスペースの新規作成リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public create(workspace: Workspace, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).create(workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークスペースの参加招待を作成します。
     * @summary ワークスペースの参加招待の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createInvitation(workspaceId: string, workspaceInvitation: WorkspaceInvitation, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createInvitation(workspaceId, workspaceInvitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳を作成します。
     * @summary 台帳の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerCreateRequestBody} [workspaceLedgerCreateRequestBody] 台帳の作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createLedger(workspaceId: string, workspaceLedgerCreateRequestBody?: WorkspaceLedgerCreateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createLedger(workspaceId, workspaceLedgerCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の参加招待を作成します。
     * @summary 台帳の参加招待の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createLedgerInvitation(workspaceId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createLedgerInvitation(workspaceId, workspaceLedgerInvitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳を作成します。
     * @summary 台帳の取引の作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerTransactionCreateRequestBody} [workspaceLedgerTransactionCreateRequestBody] 台帳の取引の作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionCreateRequestBody?: WorkspaceLedgerTransactionCreateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳を作成します。
     * @summary 台帳の取引のコメント作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {WorkspaceLedgerTransactionCommentCreateRequestBody} [workspaceLedgerTransactionCommentCreateRequestBody] 台帳の取引のコメントの作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentCreateRequestBody?: WorkspaceLedgerTransactionCommentCreateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, workspaceLedgerTransactionCommentCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークスペースの参加者グループを作成します。
     * @summary ワークスペースの参加者グループの作成を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceMemberGroupCreateRequestBody} [workspaceMemberGroupCreateRequestBody] ワークスペースの参加者グループの作成リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createMemberGroup(workspaceId: string, workspaceMemberGroupCreateRequestBody?: WorkspaceMemberGroupCreateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createMemberGroup(workspaceId, workspaceMemberGroupCreateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳で使用する管理単位を作成します。
     * @summary 台帳で使用する管理単位の作成を行います。
     * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の新規作成リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public createUnit(workspaceUnit: WorkspaceUnit, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).createUnit(workspaceUnit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加招待を削除します。
     * @summary ワークスペースの参加招待の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を削除します。
     * @summary 台帳の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteLedger(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteLedger(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳のコラボレーターを削除します。
     * @summary 台帳のコラボレーターの削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteLedgerCollaborator(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の参加招待を削除します。
     * @summary 台帳の参加招待の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteLedgerInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の参加者を削除します。
     * @summary 台帳の参加者の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteLedgerMember(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を削除します。
     * @summary 台帳の取引の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を削除します。
     * @summary 台帳の取引のコメント削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者を削除します。
     * @summary ワークスペースの参加者の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteMember(workspaceId: string, memberId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteMember(workspaceId, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者グループを削除します。
     * @summary ワークスペースの参加者グループの削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteMemberGroup(workspaceId, workspaceMemberGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者グループの参加者を削除します。
     * @summary ワークスペースの参加者グループの参加者の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {WorkspaceMemberGroupMembersDeleteRequestBody} [workspaceMemberGroupMembersDeleteRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupMembersDeleteRequestBody?: WorkspaceMemberGroupMembersDeleteRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteMemberGroupMembers(workspaceId, workspaceMemberGroupId, workspaceMemberGroupMembersDeleteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳で使用する管理単位を削除します。
     * @summary 台帳で使用する管理単位の削除を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public deleteUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).deleteUnit(workspaceId, workspaceUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースを取得します。
     * @summary ワークスペースの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public find(workspaceId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).find(workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加招待を取得します。
     * @summary ワークスペースの参加招待の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を取得します。
     * @summary 台帳の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedger(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedger(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳のコラボレーターを取得します。
     * @summary 台帳のコラボレーターの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceLedgerAddress1} workspaceLedgerId 台帳のコラボレーターIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerCollaborator(workspaceId: string, workspaceLedgerId: WorkspaceLedgerAddress1, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerCollaborator(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の参加招待を取得します。
     * @summary 台帳の参加招待の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerInvitation(workspaceId: string, workspaceInvitationId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerInvitation(workspaceId, workspaceInvitationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の参加者を取得します。
     * @summary 台帳の参加者の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerMember(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerMember(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
     * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerMemberSecuritySetting(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳のアラート設定を取得します。
     * @summary 台帳のアラート設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerSettingAlert(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の残高設定を取得します。
     * @summary 台帳の残高設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerSettingBalance(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳のコラボレーション設定を取得します。
     * @summary 台帳のコラボレーション設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerSettingCollaboration(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の目標設定を取得します。
     * @summary 台帳の目標設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerSettingGoal(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の公開設定を取得します。
     * @summary 台帳の公開設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerSettingPublication(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の取引設定を取得します。
     * @summary 台帳の取引設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerSettingTransaction(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を取得します。
     * @summary 台帳の取引の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerTransaction(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を取得します。
     * @summary 台帳の取引のコメント取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者を取得します。
     * @summary ワークスペースの参加者の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findMember(workspaceId: string, memberId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findMember(workspaceId, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者グループを取得します。
     * @summary ワークスペースの参加者グループの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findMemberGroup(workspaceId, workspaceMemberGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を取得します。
     * @summary ワークスペース参加者のセキュリティ設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findMemberSecuritySetting(workspaceId: string, memberId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findMemberSecuritySetting(workspaceId, memberId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースのセキュリティ設定を取得します。
     * @summary ワークスペースのセキュリティ設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findSecuritySetting(workspaceId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findSecuritySetting(workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳で使用する管理単位を取得します。
     * @summary 台帳で使用する管理単位の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public findUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).findUnit(workspaceId, workspaceUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーの所属するワークスペースの一覧を取得します。
     * @summary ワークスペースの一覧の取得を行います。
     * @param {string} [cursor] カーソルページネーションのカーソル位置です。
     * @param {number} [perPage] カーソルページネーションの表示件数です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public search(cursor?: string, perPage?: number, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).search(cursor, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークスペースの参加招待の一覧を取得します。
     * @summary ワークスペースの参加招待の一覧の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {Array<WorkspaceInvitationRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceInvitationRolesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceInvitationRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
     * @param {Array<WorkspaceInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceInvitationRole>, inclusionMemberRoles?: Array<WorkspaceInvitationRole>, exclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceInvitationStatus>, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchInvitation(workspaceId, workspaceInvitationId, exclusionMemberRoles, inclusionMemberRoles, exclusionInvitationStatuses, inclusionInvitationStatuses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の一覧を取得します。
     * @summary 台帳の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedger(workspaceId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedger(workspaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳のコラボレーターの一覧を取得します。
     * @summary 台帳のコラボレーターの一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedgerCollaborator(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedgerCollaborator(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の参加招待の一覧を取得します。
     * @summary 台帳の参加招待の一覧の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 招待一覧から除外するロールです。InclusionWorkspaceLedgerInvitationRolesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 招待一覧に含めるロールです。
     * @param {Array<WorkspaceLedgerInvitationStatus>} [exclusionInvitationStatuses] 招待一覧から除外するステータスです。InclusionInvitationStatusesが指定されていた場合この項目は無視されます。
     * @param {Array<WorkspaceLedgerInvitationStatus>} [inclusionInvitationStatuses] 招待一覧に含めるステータスです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedgerInvitation(workspaceId: string, workspaceInvitationId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, exclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, inclusionInvitationStatuses?: Array<WorkspaceLedgerInvitationStatus>, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedgerInvitation(workspaceId, workspaceInvitationId, exclusionMemberRoles, inclusionMemberRoles, exclusionInvitationStatuses, inclusionInvitationStatuses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の参加者の一覧を取得します。
     * @summary 台帳の参加者の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {Array<WorkspaceLedgerMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
     * @param {Array<WorkspaceLedgerMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedgerMember(workspaceId: string, workspaceLedgerId: string, exclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, inclusionMemberRoles?: Array<WorkspaceLedgerMemberRole>, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedgerMember(workspaceId, workspaceLedgerId, exclusionMemberRoles, inclusionMemberRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の設定を取得します。
     * @summary 台帳の設定の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedgerSetting(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedgerSetting(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の取引の一覧を取得します。
     * @summary 台帳の取引の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedgerTransaction(workspaceId: string, workspaceLedgerId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedgerTransaction(workspaceId, workspaceLedgerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳の取引のコメント一覧を取得します。
     * @summary 台帳の取引のコメント一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークスペースの参加者一覧を取得します。
     * @summary ワークスペースの参加者一覧の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {Array<WorkspaceMemberRole>} [exclusionMemberRoles] 参加者一覧から除外するロールです。InclusionMemberRolesが指定されていた場合ExclusionMemberRolesは無視されます。
     * @param {Array<WorkspaceMemberRole>} [inclusionMemberRoles] 参加者一覧に含めるロールです。ExclusionMemberRolesが指定されていた場合InclusionMemberRolesのみ適用されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchMember(workspaceId: string, exclusionMemberRoles?: Array<WorkspaceMemberRole>, inclusionMemberRoles?: Array<WorkspaceMemberRole>, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchMember(workspaceId, exclusionMemberRoles, inclusionMemberRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ワークスペースの参加者グループの一覧を取得します。
     * @summary ワークスペースの参加者グループの取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchMemberGroup(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchMemberGroup(workspaceId, workspaceMemberGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者グループの参加者を取得します。
     * @summary ワークスペースの参加者グループの参加者の取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchMemberGroupMembers(workspaceId: string, workspaceMemberGroupId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchMemberGroupMembers(workspaceId, workspaceMemberGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 台帳で使用する管理単位の一覧を取得します。
     * @summary 台帳で使用する管理単位の一覧取得を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public searchUnit(workspaceId: string, workspaceUnitId: string, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).searchUnit(workspaceId, workspaceUnitId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースを更新します。
     * @summary ワークスペースの更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {Workspace} workspace ワークスペースの更新リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public update(workspaceId: string, workspace: Workspace, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).update(workspaceId, workspace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加招待を更新します。
     * @summary ワークスペースの参加招待の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {WorkspaceInvitation} workspaceInvitation ワークスペースのメンバー招待更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateInvitation(workspaceId: string, workspaceInvitationId: string, workspaceInvitation: WorkspaceInvitation, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateInvitation(workspaceId, workspaceInvitationId, workspaceInvitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳を更新します。
     * @summary 台帳の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerUpdateRequestBody} [workspaceLedgerUpdateRequestBody] 台帳の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedger(workspaceId: string, workspaceLedgerId: string, workspaceLedgerUpdateRequestBody?: WorkspaceLedgerUpdateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedger(workspaceId, workspaceLedgerId, workspaceLedgerUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の参加招待を更新します。
     * @summary 台帳の参加招待の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceInvitationId 参加者招待IDです。
     * @param {WorkspaceLedgerInvitation} workspaceLedgerInvitation 台帳のメンバー招待更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerInvitation(workspaceId: string, workspaceInvitationId: string, workspaceLedgerInvitation: WorkspaceLedgerInvitation, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerInvitation(workspaceId, workspaceInvitationId, workspaceLedgerInvitation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
     * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerMemberSecuritySettings} [workspaceLedgerMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerMemberSecuritySetting(workspaceId: string, workspaceLedgerId: string, workspaceLedgerMemberSecuritySettings?: WorkspaceLedgerMemberSecuritySettings, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerMemberSecuritySetting(workspaceId, workspaceLedgerId, workspaceLedgerMemberSecuritySettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳のアラート設定を更新します。
     * @summary 台帳のアラート設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingAlert} [workspaceLedgerSettingAlert] 台帳のアラート設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerSettingAlert(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingAlert?: WorkspaceLedgerSettingAlert, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerSettingAlert(workspaceId, workspaceLedgerId, workspaceLedgerSettingAlert, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の残高設定を更新します。
     * @summary 台帳の残高設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingBalance} [workspaceLedgerSettingBalance] 台帳の残高設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerSettingBalance(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingBalance?: WorkspaceLedgerSettingBalance, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerSettingBalance(workspaceId, workspaceLedgerId, workspaceLedgerSettingBalance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳のコラボレーション設定を更新します。
     * @summary 台帳のコラボレーション設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingCollaboration} [workspaceLedgerSettingCollaboration] 台帳のコラボレーション設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerSettingCollaboration(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingCollaboration?: WorkspaceLedgerSettingCollaboration, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerSettingCollaboration(workspaceId, workspaceLedgerId, workspaceLedgerSettingCollaboration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の目標設定を更新します。
     * @summary 台帳の目標設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingGoal} [workspaceLedgerSettingGoal] 台帳の目標設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerSettingGoal(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingGoal?: WorkspaceLedgerSettingGoal, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerSettingGoal(workspaceId, workspaceLedgerId, workspaceLedgerSettingGoal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の公開設定を更新します。
     * @summary 台帳の公開設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingPublication} [workspaceLedgerSettingPublication] 台帳の公開設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerSettingPublication(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingPublication?: WorkspaceLedgerSettingPublication, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerSettingPublication(workspaceId, workspaceLedgerId, workspaceLedgerSettingPublication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の取引設定を更新します。
     * @summary 台帳の取引設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {WorkspaceLedgerSettingTransaction} [workspaceLedgerSettingTransaction] 台帳の取引設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerSettingTransaction(workspaceId: string, workspaceLedgerId: string, workspaceLedgerSettingTransaction?: WorkspaceLedgerSettingTransaction, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerSettingTransaction(workspaceId, workspaceLedgerId, workspaceLedgerSettingTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳の取引のコメントを更新します。
     * @summary 台帳の取引のコメント更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceLedgerId 台帳のIDです。
     * @param {string} workspaceLedgerTransactionId 台帳の取引IDです。
     * @param {WorkspaceLedgerTransactionCommentUpdateRequestBody} [workspaceLedgerTransactionCommentUpdateRequestBody] 台帳の取引のコメントの更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateLedgerTransactionComment(workspaceId: string, workspaceLedgerId: string, workspaceLedgerTransactionId: string, workspaceLedgerTransactionCommentUpdateRequestBody?: WorkspaceLedgerTransactionCommentUpdateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateLedgerTransactionComment(workspaceId, workspaceLedgerId, workspaceLedgerTransactionId, workspaceLedgerTransactionCommentUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースの参加者グループを更新します。
     * @summary ワークスペースの参加者グループの更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceMemberGroupId 参加者グループのIDです。
     * @param {WorkspaceMemberGroupUpdateRequestBody} [workspaceMemberGroupUpdateRequestBody] ワークスペースの参加者グループの更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateMemberGroup(workspaceId: string, workspaceMemberGroupId: string, workspaceMemberGroupUpdateRequestBody?: WorkspaceMemberGroupUpdateRequestBody, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateMemberGroup(workspaceId, workspaceMemberGroupId, workspaceMemberGroupUpdateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペース参加者のセキュリティ設定を更新します。
     * @summary ワークスペース参加者のセキュリティ設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} memberId 参加者のIDです。
     * @param {WorkspaceMemberSecuritySettings} [workspaceMemberSecuritySettings] ワークスペース参加者のセキュリティー設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateMemberSecuritySetting(workspaceId: string, memberId: string, workspaceMemberSecuritySettings?: WorkspaceMemberSecuritySettings, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateMemberSecuritySetting(workspaceId, memberId, workspaceMemberSecuritySettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用してワークスペースのセキュリティ設定を更新します。
     * @summary ワークスペースのセキュリティ設定の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {WorkspaceSecuritySettings} [workspaceSecuritySettings] ワークスペースのセキュリティー設定の更新リクエストのボディです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateSecuritySetting(workspaceId: string, workspaceSecuritySettings?: WorkspaceSecuritySettings, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateSecuritySetting(workspaceId, workspaceSecuritySettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * IDを使用して台帳で使用する管理単位を更新します。
     * @summary 台帳で使用する管理単位の更新を行います。
     * @param {string} workspaceId ワークスペースのIDです。
     * @param {string} workspaceUnitId 台帳の管理単位のIDです。
     * @param {WorkspaceUnit} workspaceUnit 台帳で使用する管理単位の更新リクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public updateUnit(workspaceId: string, workspaceUnitId: string, workspaceUnit: WorkspaceUnit, options?: AxiosRequestConfig) {
        return WorkspaceApiFp(this.configuration).updateUnit(workspaceId, workspaceUnitId, workspaceUnit, options).then((request) => request(this.axios, this.basePath));
    }
}


