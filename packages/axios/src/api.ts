/* tslint:disable */
/* eslint-disable */
/**
 * ShanyLedger App
 * これはShanyLedgerのAPIサーバーの仕様です。
 *
 * The version of the OpenAPI document: 0.0.3
 * Contact: support@shany-ledger.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthSignupRequest
 */
export interface AuthSignupRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface AuthSignupSuccessResponse
 */
export interface AuthSignupSuccessResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupSuccessResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {User}
     * @memberof AuthSignupSuccessResponse
     */
    'user'?: User;
}
/**
 * @type BadRequestError
 * リクエスト内容に誤りがあった場合のエラー詳細です。
 * @export
 */
export type BadRequestError = DefaultBadRequestError | ValidationError;

/**
 * リクエスト内容に誤りがあった場合のエラー詳細です。
 * @export
 * @interface DefaultBadRequestError
 */
export interface DefaultBadRequestError {
    /**
     * エラー内容が判別可能な文字列のコードです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'code': string;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof DefaultBadRequestError
     */
    'status'?: DefaultBadRequestErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof DefaultBadRequestError
     */
    'instance'?: string;
}

export const DefaultBadRequestErrorStatusEnum = {
    NUMBER_400: 400
} as const;

export type DefaultBadRequestErrorStatusEnum = typeof DefaultBadRequestErrorStatusEnum[keyof typeof DefaultBadRequestErrorStatusEnum];

/**
 * 
 * @export
 * @interface DefaultBadRequestErrorAllOf
 */
export interface DefaultBadRequestErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof DefaultBadRequestErrorAllOf
     */
    'status'?: DefaultBadRequestErrorAllOfStatusEnum;
}

export const DefaultBadRequestErrorAllOfStatusEnum = {
    NUMBER_400: 400
} as const;

export type DefaultBadRequestErrorAllOfStatusEnum = typeof DefaultBadRequestErrorAllOfStatusEnum[keyof typeof DefaultBadRequestErrorAllOfStatusEnum];

/**
 * サーバーで何らかの問題が発生した場合のエラー詳細です。
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    'code': InternalServerErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof InternalServerError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof InternalServerError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof InternalServerError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof InternalServerError
     */
    'status'?: InternalServerErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof InternalServerError
     */
    'instance'?: string;
}

export const InternalServerErrorCodeEnum = {
    InternalServerError: 'InternalServerError'
} as const;

export type InternalServerErrorCodeEnum = typeof InternalServerErrorCodeEnum[keyof typeof InternalServerErrorCodeEnum];
export const InternalServerErrorStatusEnum = {
    NUMBER_500: 500
} as const;

export type InternalServerErrorStatusEnum = typeof InternalServerErrorStatusEnum[keyof typeof InternalServerErrorStatusEnum];

/**
 * 
 * @export
 * @interface InternalServerErrorAllOf
 */
export interface InternalServerErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof InternalServerErrorAllOf
     */
    'status'?: InternalServerErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof InternalServerErrorAllOf
     */
    'code'?: InternalServerErrorAllOfCodeEnum;
}

export const InternalServerErrorAllOfStatusEnum = {
    NUMBER_500: 500
} as const;

export type InternalServerErrorAllOfStatusEnum = typeof InternalServerErrorAllOfStatusEnum[keyof typeof InternalServerErrorAllOfStatusEnum];
export const InternalServerErrorAllOfCodeEnum = {
    InternalServerError: 'InternalServerError'
} as const;

export type InternalServerErrorAllOfCodeEnum = typeof InternalServerErrorAllOfCodeEnum[keyof typeof InternalServerErrorAllOfCodeEnum];

/**
 * メンテナンスのため一時的にサービスが利用できなくなった場合のエラー詳細です。
 * @export
 * @interface Maintenance
 */
export interface Maintenance {
    /**
     * 
     * @type {string}
     * @memberof Maintenance
     */
    'code': MaintenanceCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof Maintenance
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof Maintenance
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof Maintenance
     */
    'detail'?: string;
    /**
     * サーバによって生成されたHTTPステータスコードです。
     * @type {number}
     * @memberof Maintenance
     */
    'status'?: number;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof Maintenance
     */
    'instance'?: string;
    /**
     * メンテナンス開始日時
     * @type {string}
     * @memberof Maintenance
     */
    'startAt': string;
    /**
     * メンテナンス終了予定日時
     * @type {string}
     * @memberof Maintenance
     */
    'endAt': string;
}

export const MaintenanceCodeEnum = {
    Maintenance: 'Maintenance'
} as const;

export type MaintenanceCodeEnum = typeof MaintenanceCodeEnum[keyof typeof MaintenanceCodeEnum];

/**
 * 
 * @export
 * @interface MaintenanceAllOf
 */
export interface MaintenanceAllOf {
    /**
     * 
     * @type {string}
     * @memberof MaintenanceAllOf
     */
    'code'?: MaintenanceAllOfCodeEnum;
    /**
     * メンテナンス開始日時
     * @type {string}
     * @memberof MaintenanceAllOf
     */
    'startAt': string;
    /**
     * メンテナンス終了予定日時
     * @type {string}
     * @memberof MaintenanceAllOf
     */
    'endAt': string;
}

export const MaintenanceAllOfCodeEnum = {
    Maintenance: 'Maintenance'
} as const;

export type MaintenanceAllOfCodeEnum = typeof MaintenanceAllOfCodeEnum[keyof typeof MaintenanceAllOfCodeEnum];

/**
 * RFC7807（https://www.rfc-editor.org/rfc/rfc7807）に準拠したエラー詳細のベースです。
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    /**
     * エラー内容が判別可能な文字列のコードです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'code': string;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string;
    /**
     * サーバによって生成されたHTTPステータスコードです。
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string;
}
/**
 * @type ServiceUnavailableError
 * メンテナンスもしくは過負荷等により一時的にサービスが利用できなくなった場合のエラー詳細です。
 * @export
 */
export type ServiceUnavailableError = Maintenance | any;

/**
 * リクエスト内容に誤りがあった場合のエラー詳細です。
 * @export
 * @interface TooManyRequestsError
 */
export interface TooManyRequestsError {
    /**
     * 
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'code': TooManyRequestsErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof TooManyRequestsError
     */
    'status'?: TooManyRequestsErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof TooManyRequestsError
     */
    'instance'?: string;
}

export const TooManyRequestsErrorCodeEnum = {
    TooManyRequests: 'TooManyRequests',
    TooManySignUpAttempts: 'TooManySignUpAttempts',
    TooManySignInAttempts: 'TooManySignInAttempts'
} as const;

export type TooManyRequestsErrorCodeEnum = typeof TooManyRequestsErrorCodeEnum[keyof typeof TooManyRequestsErrorCodeEnum];
export const TooManyRequestsErrorStatusEnum = {
    NUMBER_429: 429
} as const;

export type TooManyRequestsErrorStatusEnum = typeof TooManyRequestsErrorStatusEnum[keyof typeof TooManyRequestsErrorStatusEnum];

/**
 * 
 * @export
 * @interface TooManyRequestsErrorAllOf
 */
export interface TooManyRequestsErrorAllOf {
    /**
     * 
     * @type {number}
     * @memberof TooManyRequestsErrorAllOf
     */
    'status'?: TooManyRequestsErrorAllOfStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof TooManyRequestsErrorAllOf
     */
    'code'?: TooManyRequestsErrorAllOfCodeEnum;
}

export const TooManyRequestsErrorAllOfStatusEnum = {
    NUMBER_429: 429
} as const;

export type TooManyRequestsErrorAllOfStatusEnum = typeof TooManyRequestsErrorAllOfStatusEnum[keyof typeof TooManyRequestsErrorAllOfStatusEnum];
export const TooManyRequestsErrorAllOfCodeEnum = {
    TooManyRequests: 'TooManyRequests',
    TooManySignUpAttempts: 'TooManySignUpAttempts',
    TooManySignInAttempts: 'TooManySignInAttempts'
} as const;

export type TooManyRequestsErrorAllOfCodeEnum = typeof TooManyRequestsErrorAllOfCodeEnum[keyof typeof TooManyRequestsErrorAllOfCodeEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {any}
     * @memberof User
     */
    'emailVerifiedAt'?: any;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt': string;
}
/**
 * バリデーションに失敗した場合のエラー詳細です。
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'code': ValidationErrorCodeEnum;
    /**
     * エラーの詳細ドキュメントへのURLです。
     * @type {string}
     * @memberof ValidationError
     */
    'type'?: string;
    /**
     * 人間が読むことのできる短いサマリーです。
     * @type {string}
     * @memberof ValidationError
     */
    'title': string;
    /**
     * 人間が読むことのできる説明文です。
     * @type {string}
     * @memberof ValidationError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ValidationError
     */
    'status'?: ValidationErrorStatusEnum;
    /**
     * 問題の発生箇所の参照URIです。
     * @type {string}
     * @memberof ValidationError
     */
    'instance'?: string;
    /**
     * 
     * @type {Array<ValidationErrorAllOfErrors>}
     * @memberof ValidationError
     */
    'errors': Array<ValidationErrorAllOfErrors>;
}

export const ValidationErrorCodeEnum = {
    ValidationError: 'ValidationError'
} as const;

export type ValidationErrorCodeEnum = typeof ValidationErrorCodeEnum[keyof typeof ValidationErrorCodeEnum];
export const ValidationErrorStatusEnum = {
    NUMBER_400: 400
} as const;

export type ValidationErrorStatusEnum = typeof ValidationErrorStatusEnum[keyof typeof ValidationErrorStatusEnum];

/**
 * 
 * @export
 * @interface ValidationErrorAllOf
 */
export interface ValidationErrorAllOf {
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOf
     */
    'code'?: ValidationErrorAllOfCodeEnum;
    /**
     * 
     * @type {Array<ValidationErrorAllOfErrors>}
     * @memberof ValidationErrorAllOf
     */
    'errors': Array<ValidationErrorAllOfErrors>;
}

export const ValidationErrorAllOfCodeEnum = {
    ValidationError: 'ValidationError'
} as const;

export type ValidationErrorAllOfCodeEnum = typeof ValidationErrorAllOfCodeEnum[keyof typeof ValidationErrorAllOfCodeEnum];

/**
 * 
 * @export
 * @interface ValidationErrorAllOfErrors
 */
export interface ValidationErrorAllOfErrors {
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOfErrors
     */
    'field': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOfErrors
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationErrorAllOfErrors
     */
    'detail'?: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpWithEmailAndPassword: async (authSignupRequest: AuthSignupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authSignupRequest' is not null or undefined
            assertParamExists('signUpWithEmailAndPassword', 'authSignupRequest', authSignupRequest)
            const localVarPath = `/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authSignupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSignupSuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpWithEmailAndPassword(authSignupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * メールアドレスとパスワードを使用してサインアップとサインインを行います。
         * @summary サインアップとサインインを行います。
         * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: any): AxiosPromise<AuthSignupSuccessResponse> {
            return localVarFp.signUpWithEmailAndPassword(authSignupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * メールアドレスとパスワードを使用してサインアップとサインインを行います。
     * @summary サインアップとサインインを行います。
     * @param {AuthSignupRequest} authSignupRequest サインアップのリクエストです。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signUpWithEmailAndPassword(authSignupRequest: AuthSignupRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).signUpWithEmailAndPassword(authSignupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


